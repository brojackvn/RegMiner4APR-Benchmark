/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package org.apache.commons.jexl3.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int FOR = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int SWITCH = 14;
  /** RegularExpression Id. */
  int CASE = 15;
  /** RegularExpression Id. */
  int DCASE = 16;
  /** RegularExpression Id. */
  int TRY = 17;
  /** RegularExpression Id. */
  int CATCH = 18;
  /** RegularExpression Id. */
  int FINALLY = 19;
  /** RegularExpression Id. */
  int THROW = 20;
  /** RegularExpression Id. */
  int ASSERT = 21;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 22;
  /** RegularExpression Id. */
  int NEW = 23;
  /** RegularExpression Id. */
  int VAR = 24;
  /** RegularExpression Id. */
  int EMPTY = 25;
  /** RegularExpression Id. */
  int SIZE = 26;
  /** RegularExpression Id. */
  int THIS = 27;
  /** RegularExpression Id. */
  int NULL = 28;
  /** RegularExpression Id. */
  int TRUE = 29;
  /** RegularExpression Id. */
  int FALSE = 30;
  /** RegularExpression Id. */
  int RETURN = 31;
  /** RegularExpression Id. */
  int FUNCTION = 32;
  /** RegularExpression Id. */
  int LAMBDA = 33;
  /** RegularExpression Id. */
  int LAMBDAE = 34;
  /** RegularExpression Id. */
  int BREAK = 35;
  /** RegularExpression Id. */
  int CONTINUE = 36;
  /** RegularExpression Id. */
  int REMOVE = 37;
  /** RegularExpression Id. */
  int PRAGMA = 38;
  /** RegularExpression Id. */
  int LPAREN = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int LCURLY = 41;
  /** RegularExpression Id. */
  int RCURLY = 42;
  /** RegularExpression Id. */
  int LBRACKET = 43;
  /** RegularExpression Id. */
  int RBRACKET = 44;
  /** RegularExpression Id. */
  int SEMICOL = 45;
  /** RegularExpression Id. */
  int COLON = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int DOT = 48;
  /** RegularExpression Id. */
  int QDOT = 49;
  /** RegularExpression Id. */
  int ELLIPSIS = 50;
  /** RegularExpression Id. */
  int HBRACKET = 51;
  /** RegularExpression Id. */
  int HCURLY = 52;
  /** RegularExpression Id. */
  int CHAR = 53;
  /** RegularExpression Id. */
  int BYTE = 54;
  /** RegularExpression Id. */
  int SHORT = 55;
  /** RegularExpression Id. */
  int INT = 56;
  /** RegularExpression Id. */
  int LONG = 57;
  /** RegularExpression Id. */
  int FLOAT = 58;
  /** RegularExpression Id. */
  int DOUBLE = 59;
  /** RegularExpression Id. */
  int BOOLEAN = 60;
  /** RegularExpression Id. */
  int DOTP = 61;
  /** RegularExpression Id. */
  int DOTB = 62;
  /** RegularExpression Id. */
  int DOTC = 63;
  /** RegularExpression Id. */
  int DOTS = 64;
  /** RegularExpression Id. */
  int QMARK = 65;
  /** RegularExpression Id. */
  int ELVIS = 66;
  /** RegularExpression Id. */
  int NULLP = 67;
  /** RegularExpression Id. */
  int AND = 68;
  /** RegularExpression Id. */
  int OR = 69;
  /** RegularExpression Id. */
  int eq = 70;
  /** RegularExpression Id. */
  int ne = 71;
  /** RegularExpression Id. */
  int req = 72;
  /** RegularExpression Id. */
  int rne = 73;
  /** RegularExpression Id. */
  int is = 74;
  /** RegularExpression Id. */
  int ni = 75;
  /** RegularExpression Id. */
  int seq = 76;
  /** RegularExpression Id. */
  int eeq = 77;
  /** RegularExpression Id. */
  int sne = 78;
  /** RegularExpression Id. */
  int ene = 79;
  /** RegularExpression Id. */
  int gt = 80;
  /** RegularExpression Id. */
  int ge = 81;
  /** RegularExpression Id. */
  int lt = 82;
  /** RegularExpression Id. */
  int le = 83;
  /** RegularExpression Id. */
  int iof = 84;
  /** RegularExpression Id. */
  int plus_assign = 85;
  /** RegularExpression Id. */
  int minus_assign = 86;
  /** RegularExpression Id. */
  int mult_assign = 87;
  /** RegularExpression Id. */
  int div_assign = 88;
  /** RegularExpression Id. */
  int mod_assign = 89;
  /** RegularExpression Id. */
  int and_assign = 90;
  /** RegularExpression Id. */
  int or_assign = 91;
  /** RegularExpression Id. */
  int xor_assign = 92;
  /** RegularExpression Id. */
  int shl_assign = 93;
  /** RegularExpression Id. */
  int sar_assign = 94;
  /** RegularExpression Id. */
  int shr_assign = 95;
  /** RegularExpression Id. */
  int assign = 96;
  /** RegularExpression Id. */
  int increment = 97;
  /** RegularExpression Id. */
  int decrement = 98;
  /** RegularExpression Id. */
  int plus = 99;
  /** RegularExpression Id. */
  int minus = 100;
  /** RegularExpression Id. */
  int unary_minus = 101;
  /** RegularExpression Id. */
  int mult = 102;
  /** RegularExpression Id. */
  int div = 103;
  /** RegularExpression Id. */
  int mod = 104;
  /** RegularExpression Id. */
  int not = 105;
  /** RegularExpression Id. */
  int and = 106;
  /** RegularExpression Id. */
  int or = 107;
  /** RegularExpression Id. */
  int xor = 108;
  /** RegularExpression Id. */
  int shl = 109;
  /** RegularExpression Id. */
  int shr = 110;
  /** RegularExpression Id. */
  int sar = 111;
  /** RegularExpression Id. */
  int tilda = 112;
  /** RegularExpression Id. */
  int range = 113;
  /** RegularExpression Id. */
  int NAN_LITERAL = 114;
  /** RegularExpression Id. */
  int ANNOTATION = 115;
  /** RegularExpression Id. */
  int DOT_IDENTIFIER = 116;
  /** RegularExpression Id. */
  int IDENTIFIER = 117;
  /** RegularExpression Id. */
  int LETTER = 118;
  /** RegularExpression Id. */
  int DIGIT = 119;
  /** RegularExpression Id. */
  int ESCAPE = 120;
  /** RegularExpression Id. */
  int QUALIFIED_IDENTIFIER = 121;
  /** RegularExpression Id. */
  int QNAME = 122;
  /** RegularExpression Id. */
  int REGISTER = 123;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 124;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 125;
  /** RegularExpression Id. */
  int STRING_LITERAL = 126;
  /** RegularExpression Id. */
  int JXLT_LITERAL = 127;
  /** RegularExpression Id. */
  int REGEX_LITERAL = 128;

  /** Lexical state. */
  int QUALIFIED = 0;
  /** Lexical state. */
  int REGISTERS = 1;
  /** Lexical state. */
  int DOT_ID = 2;
  /** Lexical state. */
  int DEFAULT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"try\"",
    "\"catch\"",
    "\"finally\"",
    "\"throw\"",
    "\"assert\"",
    "\"synchronized\"",
    "\"new\"",
    "\"var\"",
    "\"empty\"",
    "\"size\"",
    "\"this\"",
    "<NULL>",
    "\"true\"",
    "\"false\"",
    "\"return\"",
    "\"function\"",
    "<LAMBDA>",
    "<LAMBDAE>",
    "\"break\"",
    "\"continue\"",
    "\"remove\"",
    "\"#pragma\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"?.\"",
    "<ELLIPSIS>",
    "\"#[\"",
    "\"#{\"",
    "\"char\"",
    "\"byte\"",
    "\"short\"",
    "\"int\"",
    "\"long\"",
    "\"float\"",
    "\"double\"",
    "\"boolean\"",
    "\".(\"",
    "\".[\"",
    "\".{\"",
    "\".@\"",
    "\"?\"",
    "\"?:\"",
    "\"??\"",
    "<AND>",
    "<OR>",
    "<eq>",
    "<ne>",
    "<req>",
    "<rne>",
    "\"===\"",
    "\"!==\"",
    "\"=^\"",
    "\"=$\"",
    "\"!^\"",
    "\"!$\"",
    "<gt>",
    "<ge>",
    "<lt>",
    "<le>",
    "\"instanceof\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"=\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"\\u2212\"",
    "<mult>",
    "<div>",
    "<mod>",
    "<not>",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"<<\"",
    "\">>>\"",
    "\">>\"",
    "\"~\"",
    "<range>",
    "\"NaN\"",
    "<ANNOTATION>",
    "<DOT_IDENTIFIER>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<ESCAPE>",
    "<QUALIFIED_IDENTIFIER>",
    "<QNAME>",
    "<REGISTER>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<STRING_LITERAL>",
    "<JXLT_LITERAL>",
    "<REGEX_LITERAL>",
  };

}
