/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package org.apache.commons.jexl3.parser;
import java.util.Collections;
import java.util.LinkedList;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlException;
import org.apache.commons.jexl3.internal.Scope;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{
    /**
     *   A stack of 1 for keeping state to deal with doted identifiers
     */
    int dotLexState = DEFAULT;

    public void pushDot() {
        dotLexState = curLexState;
        curLexState = DOT_ID;
    }

    public void popDot() {
        if (curLexState == DOT_ID) {
            curLexState = dotLexState;
            dotLexState = defaultLexState;
        }
    }

    public void pushQ() {
        dotLexState = curLexState;
        curLexState = QUALIFIED;
    }

    public void popQ() {
        if (curLexState == QUALIFIED) {
            curLexState = dotLexState;
            dotLexState = defaultLexState;
        }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe001000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 124;
         if ((active1 & 0x1400400000L) != 0L)
            return 1;
         if ((active1 & 0x200020000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 30;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 117;
            return 114;
         }
         if ((active1 & 0x40004000000L) != 0L)
            return 6;
         if ((active1 & 0x1000000000000L) != 0L)
            return 69;
         if ((active1 & 0x80008000000L) != 0L)
            return 12;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 117;
            return 9;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 102;
            return -1;
         }
         if ((active1 & 0x100003400L) != 0L)
            return 119;
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 100;
         }
         if ((active0 & 0x800000000012000L) != 0L)
         {
            jjmatchedKind = 117;
            return 36;
         }
         if ((active0 & 0x18004000000000L) != 0L)
            return 91;
         if ((active0 & 0x100000000000200L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            return 21;
         }
         if ((active1 & 0xc000c0000000L) != 0L)
         {
            jjmatchedKind = 80;
            return 26;
         }
         if ((active0 & 0x2000400L) != 0L)
         {
            jjmatchedKind = 117;
            return 17;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 104;
            return -1;
         }
         if ((active1 & 0xc800L) != 0L)
         {
            jjmatchedKind = 105;
            return 127;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 135;
         }
         if ((active0 & 0x14e00039ed5ed800L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 137;
         }
         return -1;
      case 1:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x16e00039ef7fdc00L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 137;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 137;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000002200L) != 0L)
            return 137;
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 72;
               jjmatchedPos = 1;
            }
            return 137;
         }
         return -1;
      case 2:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1ee00039ee7dd400L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 137;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100000001820800L) != 0L || (active1 & 0x4000000000000L) != 0L)
            return 137;
         return -1;
      case 3:
         if ((active0 & 0x1c800039c27d5000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
            return 137;
         }
         if ((active0 & 0x26000002c008400L) != 0L)
            return 137;
         return -1;
      case 4:
         if ((active0 & 0x1800003180694000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 4;
            return 137;
         }
         if ((active0 & 0x480000842141000L) != 0L)
            return 137;
         return -1;
      case 5:
         if ((active0 & 0x1000001100490000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
            return 137;
         }
         if ((active0 & 0x800002080204000L) != 0L)
            return 137;
         return -1;
      case 6:
         if ((active0 & 0x1100400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
            return 137;
         }
         if ((active0 & 0x1000000000090000L) != 0L)
            return 137;
         return -1;
      case 7:
         if ((active0 & 0x1100000000L) != 0L)
            return 137;
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
            return 137;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 8;
            return 137;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
            return 137;
         }
         if ((active1 & 0x100000L) != 0L)
            return 137;
         return -1;
      case 10:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 10;
            return 137;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_3(0x0L, 0xc800L);
      case 35:
         return jjMoveStringLiteralDfa1_3(0x18004000000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4000000L);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 42:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x800000L);
      case 43:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200200000L);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400400000L);
      case 46:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_3(0xe000000000000000L, 0x1L);
      case 47:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1000000L);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 45);
      case 60:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200020000000L);
      case 61:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x3400L);
      case 62:
         return jjMoveStringLiteralDfa1_3(0x0L, 0xc000c0000000L);
      case 63:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_3(0x2000000000000L, 0xcL);
      case 78:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4000000000000L);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 94:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x1040000800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x20001000048000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x800000000012000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x2000400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x400000140080800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x100000000000200L, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x200000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x800000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x2080000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x80000004404000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x28120000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x1000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 41);
      case 124:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x8000000L);
      case 125:
         return jjStopAtPos(0, 42);
      case 126:
         return jjStartNfaWithStates_3(0, 112, 69);
      case 8722:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 40:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 45:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 46:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 58:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 60:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x20000000L);
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0xc00L);
      case 62:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x4000c0000000L);
      case 63:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 64:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 91:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 94:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x41048000L, active1, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x2080810000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(1, 9, 137);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0xa0000008101000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x4080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000000400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000000000000L, active1, 0x100000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x1a00001000000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x820020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active0, 0x40000000400000L, active1, 0L);
      case 123:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 62:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x80000000L);
      case 78:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 114, 137);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x20000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_3(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x8005000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x200001100480000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x1480000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(2, 11, 137);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(2, 24, 137);
         return jjMoveStringLiteralDfa3_3(active0, 0x4000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x208400L, active1, 0x100000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 56, 137);
         return jjMoveStringLiteralDfa3_3(active0, 0x40000080040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000020000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(2, 23, 137);
         break;
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(2, 17, 137);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_3(active0, 0x400004800090000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_3(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0x100440000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(3, 10, 137);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(3, 15, 137);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(3, 26, 137);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(3, 29, 137);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 54, 137);
         return jjMoveStringLiteralDfa4_3(active0, 0x200000L, active1, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 57, 137);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x1000000000001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000100000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 53, 137);
         return jjMoveStringLiteralDfa4_3(active0, 0x80000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(3, 27, 137);
         return jjMoveStringLiteralDfa4_3(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0x1002004000L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(4, 12, 137);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(4, 30, 137);
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(4, 18, 137);
         return jjMoveStringLiteralDfa5_3(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(4, 35, 137);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_3(active0, 0x800000000080000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_3(active0, 0x80200000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 55, 137);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 58, 137);
         return jjMoveStringLiteralDfa5_3(active0, 0x100000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(4, 20, 137);
         break;
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(4, 25, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 37, 137);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 59, 137);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(5, 14, 137);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0x100000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_3(active0, 0x90000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_3(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(5, 31, 137);
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000000L, active1, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa6_3(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(5, 21, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 60, 137);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_3(active0, 0x100400000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(6, 16, 137);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(6, 19, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_3(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(7, 36, 137);
         return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(7, 32, 137);
         return jjMoveStringLiteralDfa8_3(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_3(active0, 0x400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(9, 84, 137);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_3(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_3(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_3(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_3(11, 22, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, active0, 0L);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x20L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x40000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x40000L
};
static final long[] jjbitVec3 = {
   0x4000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x200000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x100L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x200L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x0L, 0x20L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec14 = {
   0x2000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec18 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 137;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 135:
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 21:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 33)
                     jjAddStates(6, 8);
                  else if (curChar == 46)
                     jjAddStates(9, 10);
                  else if (curChar == 61)
                     jjAddStates(11, 13);
                  else if (curChar == 47)
                     jjAddStates(14, 15);
                  else if (curChar == 35)
                     jjAddStates(16, 17);
                  else if (curChar == 39)
                     jjCheckNAddStates(18, 20);
                  else if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  else if (curChar == 36)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(24, 26);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  break;
               case 124:
                  if (curChar == 46)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 91:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(27, 29);
                  break;
               case 119:
                  if (curChar == 61)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 100:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(30, 32);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 137:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 127:
                  if (curChar == 61 && kind > 71)
                     kind = 71;
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 114:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 1:
                  if (curChar == 62 && kind > 33)
                     kind = 33;
                  break;
               case 2:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if (curChar == 38 && kind > 68)
                     kind = 68;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 25:
                  if (curChar == 62 && kind > 80)
                     kind = 80;
                  break;
               case 26:
                  if (curChar == 61 && kind > 81)
                     kind = 81;
                  break;
               case 27:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 60 && kind > 82)
                     kind = 82;
                  break;
               case 30:
                  if (curChar == 61 && kind > 83)
                     kind = 83;
                  break;
               case 31:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 42 && kind > 102)
                     kind = 102;
                  break;
               case 34:
                  if (curChar == 47 && kind > 103)
                     kind = 103;
                  break;
               case 38:
                  if (curChar == 37 && kind > 104)
                     kind = 104;
                  break;
               case 42:
                  if (curChar == 33 && kind > 105)
                     kind = 105;
                  break;
               case 45:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 46:
                  if (curChar != 36)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x8500000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 50:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  break;
               case 54:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 57:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 58:
                  if (curChar == 39)
                     jjCheckNAddStates(18, 20);
                  break;
               case 59:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 62:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 64:
                  jjCheckNAddStates(33, 35);
                  break;
               case 66:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 69:
                  if (curChar == 47)
                     jjCheckNAddStates(36, 38);
                  break;
               case 70:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 72:
                  if (curChar == 47 && kind > 128)
                     kind = 128;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 46)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddStates(39, 41);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 82:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(83, 80);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 80);
                  break;
               case 86:
                  if (curChar != 48)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(24, 26);
                  break;
               case 87:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(87, 52);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(89, 52);
                  break;
               case 90:
                  if (curChar == 35)
                     jjAddStates(16, 17);
                  break;
               case 92:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(27, 29);
                  break;
               case 93:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 94:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 95:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 99:
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  break;
               case 101:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if (curChar == 42)
                     jjCheckNAddStates(46, 48);
                  break;
               case 103:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(104, 102);
                  break;
               case 104:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(104, 102);
                  break;
               case 105:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 106:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(30, 32);
                  break;
               case 107:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(30, 32);
                  break;
               case 108:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 109:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 110:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 118:
                  if (curChar == 61)
                     jjAddStates(11, 13);
                  break;
               case 120:
                  if (curChar == 61 && kind > 70)
                     kind = 70;
                  break;
               case 122:
                  if (curChar == 46)
                     jjAddStates(9, 10);
                  break;
               case 123:
                  if (curChar == 46 && kind > 50)
                     kind = 50;
                  break;
               case 125:
                  if (curChar == 46 && kind > 113)
                     kind = 113;
                  break;
               case 126:
                  if (curChar == 33)
                     jjAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 135:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 101)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  break;
               case 17:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 113)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  break;
               case 36:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 21:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 110)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(69);
                  else if (curChar == 96)
                     jjCheckNAddStates(33, 35);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 108)
                     jjAddStates(49, 50);
                  else if (curChar == 103)
                     jjAddStates(51, 52);
                  else if (curChar == 110)
                     jjAddStates(53, 55);
                  else if (curChar == 64)
                     jjCheckNAdd(45);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 91:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 119:
                  if (curChar == 126 && kind > 72)
                     kind = 72;
                  break;
               case 137:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 127:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 129;
                  else if (curChar == 126)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 9:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 114:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 116;
                  else if (curChar == 101)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 8:
                  if (curChar == 100 && kind > 68)
                     kind = 68;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 124 && kind > 69)
                     kind = 69;
                  break;
               case 13:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 114 && kind > 69)
                     kind = 69;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 22:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 35:
                  if (curChar == 118 && kind > 103)
                     kind = 103;
                  break;
               case 37:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 100 && kind > 104)
                     kind = 104;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 64)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if (curChar != 92)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 52:
                  if ((0x110000001100L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 54:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  jjCheckNAddStates(21, 23);
                  break;
               case 59:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 60:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  jjCheckNAddStates(18, 20);
                  break;
               case 63:
                  if (curChar == 96)
                     jjCheckNAddStates(33, 35);
                  break;
               case 64:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 65:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  jjCheckNAddStates(33, 35);
                  break;
               case 67:
                  if (curChar == 96 && kind > 127)
                     kind = 127;
                  break;
               case 68:
                  if (curChar == 126)
                     jjCheckNAdd(69);
                  break;
               case 70:
                  jjAddStates(36, 38);
                  break;
               case 71:
                  if (curChar == 92)
                     jjCheckNAdd(69);
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 80:
                  if ((0x5400000054L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 88:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(89, 52);
                  break;
               case 92:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(27, 29);
                  break;
               case 96:
                  if (curChar == 78 && kind > 125)
                     kind = 125;
                  break;
               case 97:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 101:
                  jjCheckNAddTwoStates(101, 102);
                  break;
               case 103:
               case 104:
                  jjCheckNAddTwoStates(104, 102);
                  break;
               case 107:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(30, 32);
                  break;
               case 111:
                  if (curChar == 110)
                     jjAddStates(53, 55);
                  break;
               case 112:
                  if (curChar == 108 && kind > 28)
                     kind = 28;
                  break;
               case 113:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 116:
                  if (curChar == 116 && kind > 105)
                     kind = 105;
                  break;
               case 117:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 128:
                  if (curChar == 126 && kind > 73)
                     kind = 73;
                  break;
               case 129:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 130:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 103)
                     jjAddStates(51, 52);
                  break;
               case 132:
                  if (curChar == 116 && kind > 80)
                     kind = 80;
                  break;
               case 133:
                  if (curChar == 101 && kind > 81)
                     kind = 81;
                  break;
               case 134:
                  if (curChar == 108)
                     jjAddStates(49, 50);
                  break;
               case 136:
                  if (curChar == 101 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 33)
                     kind = 33;
                  break;
               case 4:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 5:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 11:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 16:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 20:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 23:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 24:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 28:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 32:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 83)
                     kind = 83;
                  break;
               case 33:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 42:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 105)
                     kind = 105;
                  break;
               case 43:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               case 54:
               case 56:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(21, 23);
                  break;
               case 59:
               case 61:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(18, 20);
                  break;
               case 64:
               case 66:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 70:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 38);
                  break;
               case 92:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(27, 29);
                  break;
               case 101:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 103:
               case 104:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(104, 102);
                  break;
               case 107:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(30, 32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 137 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 121;
            return 15;
         }
         if ((active1 & 0xc800L) != 0L)
         {
            jjmatchedKind = 105;
            return 105;
         }
         if ((active1 & 0x80008000000L) != 0L)
            return 18;
         if ((active0 & 0x2000400L) != 0L)
         {
            jjmatchedKind = 121;
            return 23;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 121;
            return 92;
         }
         if ((active0 & 0xe001000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 102;
         if ((active1 & 0x40004000000L) != 0L)
            return 12;
         if ((active0 & 0x100000000000200L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            return 27;
         }
         if ((active1 & 0xc000c0000000L) != 0L)
         {
            jjmatchedKind = 80;
            return 32;
         }
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 78;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 102;
            return -1;
         }
         if ((active0 & 0x800000000012000L) != 0L)
         {
            jjmatchedKind = 121;
            return 42;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            return 113;
         }
         if ((active0 & 0x18004000000000L) != 0L)
            return 0;
         if ((active1 & 0x1000000000000L) != 0L)
            return 73;
         if ((active1 & 0x1400400000L) != 0L)
            return 7;
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 104;
            return -1;
         }
         if ((active0 & 0x14e00039ed5ed800L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            return 115;
         }
         if ((active1 & 0x100003400L) != 0L)
            return 97;
         if ((active1 & 0x200020000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 36;
         }
         return -1;
      case 1:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x16e00039ef7fdc00L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 1;
            }
            return 115;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 115;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000002200L) != 0L)
            return 115;
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 72;
               jjmatchedPos = 1;
            }
            return 115;
         }
         return -1;
      case 2:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100000001820800L) != 0L || (active1 & 0x4000000000000L) != 0L)
            return 115;
         if ((active0 & 0x1ee00039ee7dd400L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 121;
               jjmatchedPos = 2;
            }
            return 115;
         }
         return -1;
      case 3:
         if ((active0 & 0x1c800039c27d5000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
            return 115;
         }
         if ((active0 & 0x26000002c008400L) != 0L)
            return 115;
         return -1;
      case 4:
         if ((active0 & 0x1800003180694000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 4;
            return 115;
         }
         if ((active0 & 0x480000842141000L) != 0L)
            return 115;
         return -1;
      case 5:
         if ((active0 & 0x800002080204000L) != 0L)
            return 115;
         if ((active0 & 0x1000001100490000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
            return 115;
         }
         return -1;
      case 6:
         if ((active0 & 0x1100400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
            return 115;
         }
         if ((active0 & 0x1000000000090000L) != 0L)
            return 115;
         return -1;
      case 7:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 7;
            return 115;
         }
         if ((active0 & 0x1100000000L) != 0L)
            return 115;
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 8;
            return 115;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 9;
            return 115;
         }
         if ((active1 & 0x100000L) != 0L)
            return 115;
         return -1;
      case 10:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 10;
            return 115;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc800L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x18004000000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 43:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200200000L);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400400000L);
      case 46:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x1L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 45);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200020000000L);
      case 61:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3400L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000c0000000L);
      case 63:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0xcL);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 94:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1040000800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20001000048000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000000012000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000140080800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100000000000200L, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2080000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000004404000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x28120000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 41);
      case 124:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 125:
         return jjStopAtPos(0, 42);
      case 126:
         return jjStartNfaWithStates_0(0, 112, 73);
      case 8722:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 40:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 45:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 46:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 58:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 60:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00L);
      case 62:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000c0000000L);
      case 63:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 64:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 91:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 94:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x41048000L, active1, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080810000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 115);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000008101000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x100000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1a00001000000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x820020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400000L, active1, 0L);
      case 123:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 62:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L);
      case 78:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 115);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8005000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200001100480000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1480000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 115);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 115);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x208400L, active1, 0x100000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 115);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000080040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000020000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 115);
         break;
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 115);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400004800090000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100440000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 115);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 115);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 115);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 115);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 115);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 115);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000100000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 115);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 115);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002004000L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 115);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 115);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 115);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 115);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000080000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80200000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 115);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 115);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 115);
         break;
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 115);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 115);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 115);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 115);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x90000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 115);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 115);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 115);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100400000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 115);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 115);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 115);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 115);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 115);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 22, 115);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 115;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 92:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 102:
                  if (curChar == 46)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 97:
                  if (curChar == 61)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 115:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 78:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(60, 62);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 105:
                  if (curChar == 61 && kind > 71)
                     kind = 71;
                  break;
               case 5:
                  if (curChar == 33)
                     jjAddStates(63, 65);
                  else if (curChar == 46)
                     jjAddStates(66, 67);
                  else if (curChar == 61)
                     jjAddStates(68, 70);
                  else if (curChar == 47)
                     jjAddStates(71, 72);
                  else if (curChar == 39)
                     jjCheckNAddStates(73, 75);
                  else if (curChar == 34)
                     jjCheckNAddStates(76, 78);
                  else if (curChar == 36)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 33)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  break;
               case 113:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(79, 81);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(79, 81);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 62 && kind > 33)
                     kind = 33;
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 38 && kind > 68)
                     kind = 68;
                  break;
               case 13:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 31:
                  if (curChar == 62 && kind > 80)
                     kind = 80;
                  break;
               case 32:
                  if (curChar == 61 && kind > 81)
                     kind = 81;
                  break;
               case 33:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 60 && kind > 82)
                     kind = 82;
                  break;
               case 36:
                  if (curChar == 61 && kind > 83)
                     kind = 83;
                  break;
               case 37:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 42 && kind > 102)
                     kind = 102;
                  break;
               case 40:
                  if (curChar == 47 && kind > 103)
                     kind = 103;
                  break;
               case 44:
                  if (curChar == 37 && kind > 104)
                     kind = 104;
                  break;
               case 48:
                  if (curChar == 33 && kind > 105)
                     kind = 105;
                  break;
               case 51:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 52:
                  if (curChar != 36)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if (curChar != 36)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(54, 56);
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(54, 56);
                  break;
               case 57:
                  if (curChar == 34)
                     jjCheckNAddStates(76, 78);
                  break;
               case 58:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 60:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 61:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 62:
                  if (curChar == 39)
                     jjCheckNAddStates(73, 75);
                  break;
               case 63:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 65:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 66:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 68:
                  jjCheckNAddStates(82, 84);
                  break;
               case 70:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 73:
                  if (curChar == 47)
                     jjCheckNAddStates(85, 87);
                  break;
               case 74:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 76:
                  if (curChar == 47 && kind > 128)
                     kind = 128;
                  break;
               case 77:
                  if (curChar == 47)
                     jjAddStates(71, 72);
                  break;
               case 79:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 42)
                     jjCheckNAddStates(88, 90);
                  break;
               case 81:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 80);
                  break;
               case 82:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(82, 80);
                  break;
               case 83:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 84:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(60, 62);
                  break;
               case 85:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(60, 62);
                  break;
               case 86:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 87:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 88:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 96:
                  if (curChar == 61)
                     jjAddStates(68, 70);
                  break;
               case 98:
                  if (curChar == 61 && kind > 70)
                     kind = 70;
                  break;
               case 100:
                  if (curChar == 46)
                     jjAddStates(66, 67);
                  break;
               case 101:
                  if (curChar == 46 && kind > 50)
                     kind = 50;
                  break;
               case 103:
                  if (curChar == 46 && kind > 113)
                     kind = 113;
                  break;
               case 104:
                  if (curChar == 33)
                     jjAddStates(63, 65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  if (curChar == 110)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  break;
               case 92:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 101)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 42:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 23:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  break;
               case 15:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 97:
                  if (curChar == 126 && kind > 72)
                     kind = 72;
                  break;
               case 115:
               case 53:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 105:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 126)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(73);
                  else if (curChar == 96)
                     jjCheckNAddStates(82, 84);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if (curChar == 108)
                     jjAddStates(91, 92);
                  else if (curChar == 103)
                     jjAddStates(93, 94);
                  else if (curChar == 110)
                     jjAddStates(27, 29);
                  else if (curChar == 64)
                     jjCheckNAdd(51);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 113:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(79, 81);
                  break;
               case 14:
                  if (curChar == 100 && kind > 68)
                     kind = 68;
                  break;
               case 16:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 124 && kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 114 && kind > 69)
                     kind = 69;
                  break;
               case 21:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 41:
                  if (curChar == 118 && kind > 103)
                     kind = 103;
                  break;
               case 43:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if (curChar == 100 && kind > 104)
                     kind = 104;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if (curChar == 64)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
               case 56:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(54, 56);
                  break;
               case 58:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 59:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  jjCheckNAddStates(76, 78);
                  break;
               case 63:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 64:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  jjCheckNAddStates(73, 75);
                  break;
               case 67:
                  if (curChar == 96)
                     jjCheckNAddStates(82, 84);
                  break;
               case 68:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 69:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  jjCheckNAddStates(82, 84);
                  break;
               case 71:
                  if (curChar == 96 && kind > 127)
                     kind = 127;
                  break;
               case 72:
                  if (curChar == 126)
                     jjCheckNAdd(73);
                  break;
               case 74:
                  jjAddStates(85, 87);
                  break;
               case 75:
                  if (curChar == 92)
                     jjCheckNAdd(73);
                  break;
               case 79:
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
               case 82:
                  jjCheckNAddTwoStates(82, 80);
                  break;
               case 85:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(60, 62);
                  break;
               case 89:
                  if (curChar == 110)
                     jjAddStates(27, 29);
                  break;
               case 90:
                  if (curChar == 108 && kind > 28)
                     kind = 28;
                  break;
               case 91:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 93:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 94:
                  if (curChar == 116 && kind > 105)
                     kind = 105;
                  break;
               case 95:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 106:
                  if (curChar == 126 && kind > 73)
                     kind = 73;
                  break;
               case 107:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 108:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 103)
                     jjAddStates(93, 94);
                  break;
               case 110:
                  if (curChar == 116 && kind > 80)
                     kind = 80;
                  break;
               case 111:
                  if (curChar == 101 && kind > 81)
                     kind = 81;
                  break;
               case 112:
                  if (curChar == 108)
                     jjAddStates(91, 92);
                  break;
               case 114:
                  if (curChar == 101 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  break;
               case 1:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(79, 81);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 33)
                     kind = 33;
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 17:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 22:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 25:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 26:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 29:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 30:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 34:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 38:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 83)
                     kind = 83;
                  break;
               case 39:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 48:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 105)
                     kind = 105;
                  break;
               case 49:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               case 58:
               case 60:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(76, 78);
                  break;
               case 63:
               case 65:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(73, 75);
                  break;
               case 68:
               case 70:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(82, 84);
                  break;
               case 74:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(85, 87);
                  break;
               case 79:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
               case 82:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(82, 80);
                  break;
               case 85:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(60, 62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 115 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x14e00039ed5ed800L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 52;
         }
         if ((active1 & 0x80008000000L) != 0L)
            return 18;
         if ((active0 & 0x800000000012000L) != 0L)
         {
            jjmatchedKind = 116;
            return 42;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 109;
         }
         if ((active0 & 0xe001000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 98;
         if ((active0 & 0x100000000000200L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            return 27;
         }
         if ((active0 & 0x2000400L) != 0L)
         {
            jjmatchedKind = 116;
            return 23;
         }
         if ((active1 & 0x1000000000000L) != 0L)
            return 69;
         if ((active1 & 0x40004000000L) != 0L)
            return 12;
         if ((active1 & 0xc000c0000000L) != 0L)
         {
            jjmatchedKind = 80;
            return 32;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 102;
            return -1;
         }
         if ((active0 & 0x18004000000000L) != 0L)
            return 0;
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 74;
         }
         if ((active1 & 0xc800L) != 0L)
         {
            jjmatchedKind = 105;
            return 101;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 116;
            return 88;
         }
         if ((active1 & 0x100003400L) != 0L)
            return 93;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 116;
            return 15;
         }
         if ((active1 & 0x1400400000L) != 0L)
            return 7;
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 104;
            return -1;
         }
         if ((active1 & 0x200020000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 36;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 72;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x16e00039ef7fdc00L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000002200L) != 0L)
            return 52;
         return -1;
      case 2:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1ee00039ee7dd400L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 2;
            }
            return 52;
         }
         if ((active0 & 0x100000001820800L) != 0L || (active1 & 0x4000000000000L) != 0L)
            return 52;
         return -1;
      case 3:
         if ((active0 & 0x26000002c008400L) != 0L)
            return 52;
         if ((active0 & 0x1c800039c27d5000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
            return 52;
         }
         return -1;
      case 4:
         if ((active0 & 0x1800003180694000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
            return 52;
         }
         if ((active0 & 0x480000842141000L) != 0L)
            return 52;
         return -1;
      case 5:
         if ((active0 & 0x1000001100490000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
            return 52;
         }
         if ((active0 & 0x800002080204000L) != 0L)
            return 52;
         return -1;
      case 6:
         if ((active0 & 0x1100400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
            return 52;
         }
         if ((active0 & 0x1000000000090000L) != 0L)
            return 52;
         return -1;
      case 7:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
            return 52;
         }
         if ((active0 & 0x1100000000L) != 0L)
            return 52;
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 8;
            return 52;
         }
         return -1;
      case 9:
         if ((active1 & 0x100000L) != 0L)
            return 52;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 9;
            return 52;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 10;
            return 52;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xc800L);
      case 35:
         return jjMoveStringLiteralDfa1_2(0x18004000000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4000000L);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 42:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000L);
      case 43:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200200000L);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x400400000L);
      case 46:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_2(0xe000000000000000L, 0x1L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000000L);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 45);
      case 60:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200020000000L);
      case 61:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x3400L);
      case 62:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xc000c0000000L);
      case 63:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_2(0x2000000000000L, 0xcL);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4000000000000L);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 94:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x1040000800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x20001000048000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x800000000012000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x2000400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x400000140080800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x100000000000200L, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x200000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x800000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x2080000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x80000004404000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x28120000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x1000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 41);
      case 124:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8000000L);
      case 125:
         return jjStopAtPos(0, 42);
      case 126:
         return jjStartNfaWithStates_2(0, 112, 69);
      case 8722:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_2(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 40:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 45:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 46:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 58:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 60:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x20000000L);
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0xc00L);
      case 62:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x4000c0000000L);
      case 63:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 64:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 91:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 94:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x41048000L, active1, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x2080810000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(1, 9, 52);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0xa0000008101000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x4080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000000400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000000000L, active1, 0x100000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x1a00001000000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x820020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000000400000L, active1, 0L);
      case 123:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 62:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x80000000L);
      case 78:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 114, 52);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x800000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x8005000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x200001100480000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x1480000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(2, 11, 52);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(2, 24, 52);
         return jjMoveStringLiteralDfa3_2(active0, 0x4000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x208400L, active1, 0x100000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 56, 52);
         return jjMoveStringLiteralDfa3_2(active0, 0x40000080040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x800000020000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(2, 23, 52);
         break;
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(2, 17, 52);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x400004800090000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x100440000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(3, 10, 52);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(3, 15, 52);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(3, 26, 52);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(3, 29, 52);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 54, 52);
         return jjMoveStringLiteralDfa4_2(active0, 0x200000L, active1, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 57, 52);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000000000001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000100000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 53, 52);
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(3, 27, 52);
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x1002004000L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(4, 12, 52);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(4, 30, 52);
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(4, 18, 52);
         return jjMoveStringLiteralDfa5_2(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(4, 35, 52);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000080000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x80200000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 55, 52);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 58, 52);
         return jjMoveStringLiteralDfa5_2(active0, 0x100000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 52);
         break;
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(4, 25, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 37, 52);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 59, 52);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(5, 14, 52);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x100000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0x90000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(5, 31, 52);
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000L, active1, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(5, 21, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 60, 52);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x100400000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 52);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(6, 19, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 36, 52);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(7, 32, 52);
         return jjMoveStringLiteralDfa8_2(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(9, 84, 52);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_2(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(11, 22, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 111;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 101:
                  if (curChar == 61 && kind > 71)
                     kind = 71;
                  break;
               case 109:
               case 52:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 98:
                  if (curChar == 46)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 74:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(95, 97);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 88:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 33)
                     jjAddStates(98, 100);
                  else if (curChar == 46)
                     jjAddStates(101, 102);
                  else if (curChar == 61)
                     jjAddStates(103, 105);
                  else if (curChar == 47)
                     jjAddStates(106, 107);
                  else if (curChar == 39)
                     jjCheckNAddStates(18, 20);
                  else if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  else if (curChar == 37)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 33)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 93:
                  if (curChar == 61)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(79, 81);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(79, 81);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 62 && kind > 33)
                     kind = 33;
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 38 && kind > 68)
                     kind = 68;
                  break;
               case 13:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 31:
                  if (curChar == 62 && kind > 80)
                     kind = 80;
                  break;
               case 32:
                  if (curChar == 61 && kind > 81)
                     kind = 81;
                  break;
               case 33:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 60 && kind > 82)
                     kind = 82;
                  break;
               case 36:
                  if (curChar == 61 && kind > 83)
                     kind = 83;
                  break;
               case 37:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 42 && kind > 102)
                     kind = 102;
                  break;
               case 40:
                  if (curChar == 47 && kind > 103)
                     kind = 103;
                  break;
               case 44:
                  if (curChar == 37 && kind > 104)
                     kind = 104;
                  break;
               case 48:
                  if (curChar == 33 && kind > 105)
                     kind = 105;
                  break;
               case 51:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  break;
               case 54:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 57:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 58:
                  if (curChar == 39)
                     jjCheckNAddStates(18, 20);
                  break;
               case 59:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 62:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 64:
                  jjCheckNAddStates(33, 35);
                  break;
               case 66:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 69:
                  if (curChar == 47)
                     jjCheckNAddStates(36, 38);
                  break;
               case 70:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 72:
                  if (curChar == 47 && kind > 128)
                     kind = 128;
                  break;
               case 73:
                  if (curChar == 47)
                     jjAddStates(106, 107);
                  break;
               case 75:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar == 42)
                     jjCheckNAddStates(108, 110);
                  break;
               case 77:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 76);
                  break;
               case 78:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 76);
                  break;
               case 79:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 80:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(95, 97);
                  break;
               case 81:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(95, 97);
                  break;
               case 82:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 83:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 84:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 92:
                  if (curChar == 61)
                     jjAddStates(103, 105);
                  break;
               case 94:
                  if (curChar == 61 && kind > 70)
                     kind = 70;
                  break;
               case 96:
                  if (curChar == 46)
                     jjAddStates(101, 102);
                  break;
               case 97:
                  if (curChar == 46 && kind > 50)
                     kind = 50;
                  break;
               case 99:
                  if (curChar == 46 && kind > 113)
                     kind = 113;
                  break;
               case 100:
                  if (curChar == 33)
                     jjAddStates(98, 100);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 101:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 103;
                  else if (curChar == 126)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 109:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  break;
               case 42:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 15:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 88:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if (curChar == 101)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(69);
                  else if (curChar == 96)
                     jjCheckNAddStates(33, 35);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if (curChar == 108)
                     jjAddStates(111, 112);
                  else if (curChar == 103)
                     jjAddStates(113, 114);
                  else if (curChar == 110)
                     jjAddStates(115, 117);
                  else if (curChar == 64)
                     jjCheckNAdd(51);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 27:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 110)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  break;
               case 93:
                  if (curChar == 126 && kind > 72)
                     kind = 72;
                  break;
               case 23:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(52);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(79, 81);
                  break;
               case 14:
                  if (curChar == 100 && kind > 68)
                     kind = 68;
                  break;
               case 16:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 124 && kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 114 && kind > 69)
                     kind = 69;
                  break;
               case 21:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 41:
                  if (curChar == 118 && kind > 103)
                     kind = 103;
                  break;
               case 43:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if (curChar == 100 && kind > 104)
                     kind = 104;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if (curChar == 64)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(52);
                  break;
               case 54:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  jjCheckNAddStates(21, 23);
                  break;
               case 59:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 60:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  jjCheckNAddStates(18, 20);
                  break;
               case 63:
                  if (curChar == 96)
                     jjCheckNAddStates(33, 35);
                  break;
               case 64:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 65:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  jjCheckNAddStates(33, 35);
                  break;
               case 67:
                  if (curChar == 96 && kind > 127)
                     kind = 127;
                  break;
               case 68:
                  if (curChar == 126)
                     jjCheckNAdd(69);
                  break;
               case 70:
                  jjAddStates(36, 38);
                  break;
               case 71:
                  if (curChar == 92)
                     jjCheckNAdd(69);
                  break;
               case 75:
                  jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
               case 78:
                  jjCheckNAddTwoStates(78, 76);
                  break;
               case 81:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(95, 97);
                  break;
               case 85:
                  if (curChar == 110)
                     jjAddStates(115, 117);
                  break;
               case 86:
                  if (curChar == 108 && kind > 28)
                     kind = 28;
                  break;
               case 87:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 89:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 90:
                  if (curChar == 116 && kind > 105)
                     kind = 105;
                  break;
               case 91:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 102:
                  if (curChar == 126 && kind > 73)
                     kind = 73;
                  break;
               case 103:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 104:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 103)
                     jjAddStates(113, 114);
                  break;
               case 106:
                  if (curChar == 116 && kind > 80)
                     kind = 80;
                  break;
               case 107:
                  if (curChar == 101 && kind > 81)
                     kind = 81;
                  break;
               case 108:
                  if (curChar == 108)
                     jjAddStates(111, 112);
                  break;
               case 110:
                  if (curChar == 101 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  break;
               case 1:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(79, 81);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 28)
                     kind = 28;
                  break;
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 33)
                     kind = 33;
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 17:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 22:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 25:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 26:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 29:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 30:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 34:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 38:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 83)
                     kind = 83;
                  break;
               case 39:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 48:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 105)
                     kind = 105;
                  break;
               case 49:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               case 54:
               case 56:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(21, 23);
                  break;
               case 59:
               case 61:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(18, 20);
                  break;
               case 64:
               case 66:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 70:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 38);
                  break;
               case 75:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
               case 78:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(78, 76);
                  break;
               case 81:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(95, 97);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 111 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe001000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 126;
         if ((active1 & 0x1400400000L) != 0L)
            return 1;
         if ((active1 & 0x200020000000L) != 0L)
         {
            jjmatchedKind = 82;
            return 30;
         }
         if ((active1 & 0x40004000000L) != 0L)
            return 6;
         if ((active1 & 0x80008000000L) != 0L)
            return 12;
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 117;
            return 9;
         }
         if ((active1 & 0x100003400L) != 0L)
            return 121;
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 102;
            return -1;
         }
         if ((active1 & 0x1000000000000L) != 0L)
            return 71;
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 102;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 137;
         }
         if ((active1 & 0xc800L) != 0L)
         {
            jjmatchedKind = 105;
            return 129;
         }
         if ((active0 & 0x800000000012000L) != 0L)
         {
            jjmatchedKind = 117;
            return 36;
         }
         if ((active0 & 0x100000000000200L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            return 21;
         }
         if ((active1 & 0xc000c0000000L) != 0L)
         {
            jjmatchedKind = 80;
            return 26;
         }
         if ((active0 & 0x18004000000000L) != 0L)
            return 93;
         if ((active0 & 0x2000400L) != 0L)
         {
            jjmatchedKind = 117;
            return 17;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 104;
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 117;
            return 116;
         }
         if ((active0 & 0x14e00039ed5ed800L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            return 139;
         }
         return -1;
      case 1:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x800000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x16e00039ef7fdc00L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 1;
            }
            return 139;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 139;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 104;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x800000000002200L) != 0L)
            return 139;
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 72;
               jjmatchedPos = 1;
            }
            return 139;
         }
         return -1;
      case 2:
         if ((active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1ee00039ee7dd400L) != 0L || (active1 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 117;
               jjmatchedPos = 2;
            }
            return 139;
         }
         if ((active1 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100000001820800L) != 0L || (active1 & 0x4000000000000L) != 0L)
            return 139;
         return -1;
      case 3:
         if ((active0 & 0x1c800039c27d5000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
            return 139;
         }
         if ((active0 & 0x26000002c008400L) != 0L)
            return 139;
         return -1;
      case 4:
         if ((active0 & 0x1800003180694000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 4;
            return 139;
         }
         if ((active0 & 0x480000842141000L) != 0L)
            return 139;
         return -1;
      case 5:
         if ((active0 & 0x1000001100490000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
            return 139;
         }
         if ((active0 & 0x800002080204000L) != 0L)
            return 139;
         return -1;
      case 6:
         if ((active0 & 0x1100400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
            return 139;
         }
         if ((active0 & 0x1000000000090000L) != 0L)
            return 139;
         return -1;
      case 7:
         if ((active0 & 0x1100000000L) != 0L)
            return 139;
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
            return 139;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 8;
            return 139;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 9;
            return 139;
         }
         if ((active1 & 0x100000L) != 0L)
            return 139;
         return -1;
      case 10:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 10;
            return 139;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xc800L);
      case 35:
         return jjMoveStringLiteralDfa1_1(0x18004000000000L, 0x0L);
      case 37:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000000L);
      case 38:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000000L);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 42:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800000L);
      case 43:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200200000L);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400400000L);
      case 46:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_1(0xe000000000000000L, 0x1L);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000L);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 45);
      case 60:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200020000000L);
      case 61:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x3400L);
      case 62:
         return jjMoveStringLiteralDfa1_1(0x0L, 0xc000c0000000L);
      case 63:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_1(0x2000000000000L, 0xcL);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000000000000L);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 94:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x1040000800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x20001000048000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x800000000012000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x2000400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x400000140080800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x100000000000200L, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x200000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x800000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x2080000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x80000004404000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x28120000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x1000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 41);
      case 124:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000L);
      case 125:
         return jjStopAtPos(0, 42);
      case 126:
         return jjStartNfaWithStates_1(0, 112, 71);
      case 8722:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 40:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 45:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 46:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 58:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 60:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20000000L);
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0xc00L);
      case 62:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000c0000000L);
      case 63:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 64:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 91:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 94:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x41048000L, active1, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x2080810000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(1, 9, 139);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0xa0000008101000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x4080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000000L, active1, 0x100000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1a00001000000800L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x820020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000400000L, active1, 0L);
      case 123:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 62:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80000000L);
      case 78:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 114, 139);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x8005000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x200001100480000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x1480000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(2, 11, 139);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(2, 24, 139);
         return jjMoveStringLiteralDfa3_1(active0, 0x4000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x208400L, active1, 0x100000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 56, 139);
         return jjMoveStringLiteralDfa3_1(active0, 0x40000080040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000020000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(2, 23, 139);
         break;
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(2, 17, 139);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x400004800090000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x100440000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 139);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(3, 15, 139);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(3, 26, 139);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 139);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 54, 139);
         return jjMoveStringLiteralDfa4_1(active0, 0x200000L, active1, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 57, 139);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000100000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 53, 139);
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(3, 27, 139);
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x1002004000L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 12, 139);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(4, 30, 139);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(4, 18, 139);
         return jjMoveStringLiteralDfa5_1(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(4, 35, 139);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000000080000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x80200000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 55, 139);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 58, 139);
         return jjMoveStringLiteralDfa5_1(active0, 0x100000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 139);
         break;
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(4, 25, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 37, 139);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 59, 139);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(5, 14, 139);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x90000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(5, 31, 139);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000L, active1, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(5, 21, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 60, 139);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x100400000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(6, 16, 139);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(6, 19, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 36, 139);
         return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(7, 32, 139);
         return jjMoveStringLiteralDfa8_1(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(9, 84, 139);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(11, 22, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 139;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 126:
                  if (curChar == 46)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 17:
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 36:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 137:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 102:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(118, 120);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 21:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(121, 126);
                  else if (curChar == 33)
                     jjAddStates(127, 129);
                  else if (curChar == 46)
                     jjAddStates(130, 131);
                  else if (curChar == 61)
                     jjAddStates(132, 134);
                  else if (curChar == 47)
                     jjAddStates(135, 136);
                  else if (curChar == 35)
                     jjAddStates(137, 138);
                  else if (curChar == 39)
                     jjCheckNAddStates(139, 141);
                  else if (curChar == 34)
                     jjCheckNAddStates(142, 144);
                  else if (curChar == 36)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddTwoStates(53, 54);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(145, 147);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(51);
                  else if (curChar == 33)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  break;
               case 121:
                  if (curChar == 61)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 129:
                  if (curChar == 61 && kind > 71)
                     kind = 71;
                  break;
               case 139:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(51);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(148, 150);
                  }
                  break;
               case 116:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 1:
                  if (curChar == 62 && kind > 33)
                     kind = 33;
                  break;
               case 2:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if (curChar == 38 && kind > 68)
                     kind = 68;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 25:
                  if (curChar == 62 && kind > 80)
                     kind = 80;
                  break;
               case 26:
                  if (curChar == 61 && kind > 81)
                     kind = 81;
                  break;
               case 27:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 60 && kind > 82)
                     kind = 82;
                  break;
               case 30:
                  if (curChar == 61 && kind > 83)
                     kind = 83;
                  break;
               case 31:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 42 && kind > 102)
                     kind = 102;
                  break;
               case 34:
                  if (curChar == 47 && kind > 103)
                     kind = 103;
                  break;
               case 38:
                  if (curChar == 37 && kind > 104)
                     kind = 104;
                  break;
               case 42:
                  if (curChar == 33 && kind > 105)
                     kind = 105;
                  break;
               case 45:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 46:
                  if (curChar != 36)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x8500000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 50:
                  if (curChar == 35)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if (curChar == 34)
                     jjCheckNAddStates(142, 144);
                  break;
               case 56:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(142, 144);
                  break;
               case 58:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(142, 144);
                  break;
               case 59:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 60:
                  if (curChar == 39)
                     jjCheckNAddStates(139, 141);
                  break;
               case 61:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(139, 141);
                  break;
               case 63:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(139, 141);
                  break;
               case 64:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 66:
                  jjCheckNAddStates(151, 153);
                  break;
               case 68:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(151, 153);
                  break;
               case 71:
                  if (curChar == 47)
                     jjCheckNAddStates(154, 156);
                  break;
               case 72:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(154, 156);
                  break;
               case 74:
                  if (curChar == 47 && kind > 128)
                     kind = 128;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(121, 126);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (curChar == 46)
                     jjCheckNAdd(78);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddStates(157, 159);
                  break;
               case 80:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(160, 163);
                  break;
               case 84:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(85, 82);
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 82);
                  break;
               case 88:
                  if (curChar != 48)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(145, 147);
                  break;
               case 89:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(89, 54);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(91, 54);
                  break;
               case 92:
                  if (curChar == 35)
                     jjAddStates(137, 138);
                  break;
               case 94:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(148, 150);
                  break;
               case 95:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 96:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 97:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 101:
                  if (curChar == 47)
                     jjAddStates(135, 136);
                  break;
               case 103:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 104:
                  if (curChar == 42)
                     jjCheckNAddStates(164, 166);
                  break;
               case 105:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(106, 104);
                  break;
               case 106:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(106, 104);
                  break;
               case 107:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 108:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(118, 120);
                  break;
               case 109:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(118, 120);
                  break;
               case 110:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 111:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 112:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 120:
                  if (curChar == 61)
                     jjAddStates(132, 134);
                  break;
               case 122:
                  if (curChar == 61 && kind > 70)
                     kind = 70;
                  break;
               case 124:
                  if (curChar == 46)
                     jjAddStates(130, 131);
                  break;
               case 125:
                  if (curChar == 46 && kind > 50)
                     kind = 50;
                  break;
               case 127:
                  if (curChar == 46 && kind > 113)
                     kind = 113;
                  break;
               case 128:
                  if (curChar == 33)
                     jjAddStates(127, 129);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 113)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  break;
               case 36:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 137:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 101)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  break;
               case 21:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 110)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(71);
                  else if (curChar == 96)
                     jjCheckNAddStates(151, 153);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 108)
                     jjAddStates(167, 168);
                  else if (curChar == 103)
                     jjAddStates(169, 170);
                  else if (curChar == 110)
                     jjAddStates(171, 173);
                  else if (curChar == 64)
                     jjCheckNAdd(45);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 121:
                  if (curChar == 126 && kind > 72)
                     kind = 72;
                  break;
               case 129:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if (curChar == 126)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 139:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 9:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 93:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 116:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  else if (curChar == 101)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 8:
                  if (curChar == 100 && kind > 68)
                     kind = 68;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 124 && kind > 69)
                     kind = 69;
                  break;
               case 13:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 114 && kind > 69)
                     kind = 69;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 22:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 35:
                  if (curChar == 118 && kind > 103)
                     kind = 103;
                  break;
               case 37:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 100 && kind > 104)
                     kind = 104;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (curChar == 64)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if (curChar != 92)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 54:
                  if ((0x110000001100L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(142, 144);
                  break;
               case 57:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  jjCheckNAddStates(142, 144);
                  break;
               case 61:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(139, 141);
                  break;
               case 62:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  jjCheckNAddStates(139, 141);
                  break;
               case 65:
                  if (curChar == 96)
                     jjCheckNAddStates(151, 153);
                  break;
               case 66:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(151, 153);
                  break;
               case 67:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  jjCheckNAddStates(151, 153);
                  break;
               case 69:
                  if (curChar == 96 && kind > 127)
                     kind = 127;
                  break;
               case 70:
                  if (curChar == 126)
                     jjCheckNAdd(71);
                  break;
               case 72:
                  jjAddStates(154, 156);
                  break;
               case 73:
                  if (curChar == 92)
                     jjCheckNAdd(71);
                  break;
               case 79:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(174, 175);
                  break;
               case 82:
                  if ((0x5400000054L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 85:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(176, 177);
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(91, 54);
                  break;
               case 94:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(148, 150);
                  break;
               case 98:
                  if (curChar == 78 && kind > 125)
                     kind = 125;
                  break;
               case 99:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 103:
                  jjCheckNAddTwoStates(103, 104);
                  break;
               case 105:
               case 106:
                  jjCheckNAddTwoStates(106, 104);
                  break;
               case 109:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(118, 120);
                  break;
               case 113:
                  if (curChar == 110)
                     jjAddStates(171, 173);
                  break;
               case 114:
                  if (curChar == 108 && kind > 28)
                     kind = 28;
                  break;
               case 115:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 118:
                  if (curChar == 116 && kind > 105)
                     kind = 105;
                  break;
               case 119:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 130:
                  if (curChar == 126 && kind > 73)
                     kind = 73;
                  break;
               case 131:
                  if (curChar == 110 && kind > 73)
                     kind = 73;
                  break;
               case 132:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 103)
                     jjAddStates(169, 170);
                  break;
               case 134:
                  if (curChar == 116 && kind > 80)
                     kind = 80;
                  break;
               case 135:
                  if (curChar == 101 && kind > 81)
                     kind = 81;
                  break;
               case 136:
                  if (curChar == 108)
                     jjAddStates(167, 168);
                  break;
               case 138:
                  if (curChar == 101 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 33)
                     kind = 33;
                  break;
               case 4:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 34)
                     kind = 34;
                  break;
               case 5:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 11:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 16:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 20:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 23:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 72)
                     kind = 72;
                  break;
               case 24:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               case 28:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 81)
                     kind = 81;
                  break;
               case 32:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 83)
                     kind = 83;
                  break;
               case 33:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 102)
                     kind = 102;
                  break;
               case 42:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 105)
                     kind = 105;
                  break;
               case 43:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               case 56:
               case 58:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(142, 144);
                  break;
               case 61:
               case 63:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(139, 141);
                  break;
               case 66:
               case 68:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(151, 153);
                  break;
               case 72:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(154, 156);
                  break;
               case 94:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(148, 150);
                  break;
               case 103:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 105:
               case 106:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(106, 104);
                  break;
               case 109:
                  if (!jjCanMove_16(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(118, 120);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 139 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   74, 75, 81, 82, 83, 80, 127, 128, 130, 124, 125, 119, 120, 121, 100, 106, 
   91, 98, 59, 60, 62, 54, 55, 57, 87, 88, 52, 92, 93, 95, 107, 108, 
   110, 64, 65, 67, 70, 71, 72, 76, 77, 80, 81, 82, 83, 80, 102, 103, 
   105, 135, 136, 132, 133, 114, 115, 117, 78, 79, 84, 85, 85, 86, 88, 105, 
   106, 108, 102, 103, 97, 98, 99, 78, 84, 63, 64, 66, 58, 59, 61, 1, 
   2, 4, 68, 69, 71, 74, 75, 76, 80, 81, 83, 113, 114, 110, 111, 81, 
   82, 84, 101, 102, 104, 98, 99, 93, 94, 95, 74, 80, 76, 77, 79, 109, 
   110, 106, 107, 88, 89, 91, 109, 110, 112, 76, 77, 83, 84, 85, 82, 129, 
   130, 132, 126, 127, 121, 122, 123, 102, 108, 93, 100, 61, 62, 64, 56, 57, 
   59, 89, 90, 54, 94, 95, 97, 66, 67, 69, 72, 73, 74, 78, 79, 82, 
   83, 84, 85, 82, 104, 105, 107, 137, 138, 134, 135, 116, 117, 119, 80, 81, 
   86, 87, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec13[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec14[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec18[i2] & l2) != 0L);
      default :
         if ((jjbitVec15[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec17[i2] & l2) != 0L);
      default :
         if ((jjbitVec19[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\151\146", 
"\145\154\163\145", "\146\157\162", "\167\150\151\154\145", "\144\157", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", "\164\162\171", 
"\143\141\164\143\150", "\146\151\156\141\154\154\171", "\164\150\162\157\167", 
"\141\163\163\145\162\164", "\163\171\156\143\150\162\157\156\151\172\145\144", "\156\145\167", 
"\166\141\162", "\145\155\160\164\171", "\163\151\172\145", "\164\150\151\163", null, 
"\164\162\165\145", "\146\141\154\163\145", "\162\145\164\165\162\156", 
"\146\165\156\143\164\151\157\156", null, null, "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\162\145\155\157\166\145", "\43\160\162\141\147\155\141", "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\72", "\54", "\56", "\77\56", null, "\43\133", "\43\173", "\143\150\141\162", 
"\142\171\164\145", "\163\150\157\162\164", "\151\156\164", "\154\157\156\147", 
"\146\154\157\141\164", "\144\157\165\142\154\145", "\142\157\157\154\145\141\156", "\56\50", 
"\56\133", "\56\173", "\56\100", "\77", "\77\72", "\77\77", null, null, null, null, null, 
null, "\75\75\75", "\41\75\75", "\75\136", "\75\44", "\41\136", "\41\44", null, null, 
null, null, "\151\156\163\164\141\156\143\145\157\146", "\53\75", "\55\75", 
"\52\75", "\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\75", "\53\53", "\55\55", "\53", "\55", "\u2212", null, null, null, null, 
"\46", "\174", "\136", "\74\74", "\76\76\76", "\76\76", "\176", null, "\116\141\116", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "QUALIFIED",
   "REGISTERS",
   "DOT_ID",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xfa3fffffffffffffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[139];
private final int[] jjstateSet = new int[278];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 139; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 3;
int defaultLexState = 3;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                        pushQ();
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                            popDot();
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                          popDot();
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                              popDot();
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                               pushQ();
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                         popQ();
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                           popQ();
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                      pushDot();
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                        pushDot();
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                               pushQ();
         break;
      case 116 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         popDot();
         break;
      case 117 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          matchedToken.image = StringParser.unescapeIdentifier(matchedToken.image);
         break;
      case 121 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     popQ();
         break;
      case 126 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      case 127 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      case 128 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
