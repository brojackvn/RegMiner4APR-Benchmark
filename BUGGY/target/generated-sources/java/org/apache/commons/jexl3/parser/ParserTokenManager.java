/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package org.apache.commons.jexl3.parser;
import java.util.Collections;
import java.util.LinkedList;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlException;
import org.apache.commons.jexl3.internal.Scope;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{
    /**
     *   A stack of 1 for keeping state to deal with doted identifiers
     */
    int dotLexState = DEFAULT;

    public void pushDot() {
        dotLexState = curLexState;
        curLexState = DOT_ID;
    }

    public void popDot() {
        if (curLexState == DOT_ID) {
            curLexState = dotLexState;
            dotLexState = defaultLexState;
        }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x5000000000L) != 0L || (active1 & 0x400000L) != 0L)
            return 10;
         if ((active0 & 0x2aaa800037ffe00L) != 0L || (active1 & 0x82a000L) != 0L)
         {
            jjmatchedKind = 90;
            return 72;
         }
         if ((active1 & 0x200000L) != 0L)
            return 31;
         if ((active1 & 0x1008L) != 0L)
            return 61;
         if ((active0 & 0x4000000L) != 0L)
            return 52;
         return -1;
      case 1:
         if ((active0 & 0x800037f9c00L) != 0L || (active1 & 0x82a000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 72;
         }
         if ((active0 & 0x2aaa00000006200L) != 0L)
            return 72;
         return -1;
      case 2:
         if ((active0 & 0x37f1400L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 72;
         }
         if ((active0 & 0x8000000c800L) != 0L || (active1 & 0x82a000L) != 0L)
            return 72;
         return -1;
      case 3:
         if ((active0 & 0x3711000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
            return 72;
         }
         if ((active0 & 0xe0400L) != 0L)
            return 72;
         return -1;
      case 4:
         if ((active0 & 0x2600000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 72;
         }
         if ((active0 & 0x1111000L) != 0L)
            return 72;
         return -1;
      case 5:
         if ((active0 & 0x2400000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 72;
         }
         if ((active0 & 0x200000L) != 0L)
            return 72;
         return -1;
      case 6:
         if ((active0 & 0x2400000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 72;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_2(0xc801000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_2(0x4000000L, 0x0L);
      case 37:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10L);
      case 38:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_2(0x40000000000L, 0x20L);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4L);
      case 43:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1L);
      case 44:
         return jjStopAtPos(0, 35);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_2(0x800000L, 0x2L);
      case 46:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_2(0x4000000000L, 0x400000L);
      case 47:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8L);
      case 58:
         return jjStopAtPos(0, 34);
      case 59:
         return jjStopAtPos(0, 33);
      case 60:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_2(0x100000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_2(0x3400400000000000L, 0x0L);
      case 62:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_2(0x10000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_2(0x32000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000L);
      case 91:
         return jjStopAtPos(0, 31);
      case 93:
         return jjStopAtPos(0, 32);
      case 94:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x80000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x1000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x2000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x2000L, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x800000010400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x500800L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_2(0x28000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x200L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x280000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x2000000044000L, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x200000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x200000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x20000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x80000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x8000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 29);
      case 124:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_2(0x100000000000L, 0x40L);
      case 125:
         return jjStopAtPos(0, 30);
      case 126:
         return jjStartNfaWithStates_2(0, 85, 31);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 46:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 63:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 94:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x108000L, active1, 0x800000L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 53, 72);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 57, 72);
         return jjMoveStringLiteralDfa2_2(active0, 0x204000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(1, 9, 72);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(1, 13, 72);
         return jjMoveStringLiteralDfa2_2(active0, 0x2000800L, active1, 0x28000L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000L, active1, 0L);
      case 113:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 47, 72);
         break;
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 45, 72);
         return jjMoveStringLiteralDfa2_2(active0, 0x1080000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 51, 72);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 55, 72);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x440000L, active1, 0L);
      case 124:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 126:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         break;
      case 78:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(2, 87, 72);
         break;
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 43, 72);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(2, 79, 72);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x140000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x2400000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(2, 11, 72);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(2, 15, 72);
         return jjMoveStringLiteralDfa3_2(active0, 0x4000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x400L, active1, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(2, 81, 72);
         return jjMoveStringLiteralDfa3_2(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000L, active1, 0L);
      case 118:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(2, 77, 72);
         break;
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(2, 14, 72);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x5000000L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x400000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(3, 10, 72);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 17, 72);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(3, 19, 72);
         break;
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(3, 18, 72);
         return jjMoveStringLiteralDfa4_2(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x2010000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(4, 12, 72);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 72);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(4, 24, 72);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa5_2(active0, 0x400000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(5, 21, 72);
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(7, 25, 72);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(7, 22, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 72;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 2);
                  break;
               case 61:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 11);
                  else if (curChar == 47)
                     jjAddStates(12, 13);
                  else if (curChar == 35)
                     jjAddStates(14, 15);
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  else if (curChar == 36)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddStates(22, 24);
                  }
                  break;
               case 72:
               case 3:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar != 36)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x8500000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 6:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 18:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 19:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 24:
                  if (curChar == 39 && kind > 104)
                     kind = 104;
                  break;
               case 26:
                  jjCheckNAddStates(28, 30);
                  break;
               case 28:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 31:
                  if (curChar == 47)
                     jjCheckNAddStates(31, 33);
                  break;
               case 32:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 34:
                  if (curChar == 47 && kind > 106)
                     kind = 106;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 11);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(34, 36);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(41, 14);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(44, 14);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(46, 14);
                  break;
               case 47:
                  if (curChar != 48)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(22, 24);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(49, 8);
                  break;
               case 50:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(50, 8);
                  break;
               case 51:
                  if (curChar == 35)
                     jjAddStates(14, 15);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 2);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 55:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 60:
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  break;
               case 62:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddStates(41, 43);
                  break;
               case 64:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 65:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 66:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 67:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(3, 5);
                  break;
               case 68:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(3, 5);
                  break;
               case 69:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 70:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 71:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 0:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(31);
                  else if (curChar == 96)
                     jjCheckNAddStates(28, 30);
                  if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 72:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar != 92)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if ((0x110000001100L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 14:
                  if ((0x5400000054L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 17:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  jjCheckNAddStates(19, 21);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if (curChar == 96)
                     jjCheckNAddStates(28, 30);
                  break;
               case 26:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 27:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  jjCheckNAddStates(28, 30);
                  break;
               case 29:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 30:
                  if (curChar == 126)
                     jjCheckNAdd(31);
                  break;
               case 32:
                  jjAddStates(31, 33);
                  break;
               case 33:
                  if (curChar == 92)
                     jjCheckNAdd(31);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 48:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(49, 8);
                  break;
               case 53:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(0, 2);
                  break;
               case 57:
                  if (curChar == 78 && kind > 100)
                     kind = 100;
                  break;
               case 58:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  jjCheckNAddTwoStates(65, 63);
                  break;
               case 68:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  break;
               case 21:
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               case 26:
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(28, 30);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 33);
                  break;
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(0, 2);
                  break;
               case 62:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
               case 65:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(65, 63);
                  break;
               case 68:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 72 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000L) != 0L)
            return 0;
         if ((active1 & 0x1008L) != 0L)
            return 30;
         if ((active0 & 0x2aaa800037ffe00L) != 0L || (active1 & 0x82a000L) != 0L)
         {
            jjmatchedKind = 89;
            return 8;
         }
         if ((active1 & 0x200000L) != 0L)
            return 25;
         return -1;
      case 1:
         if ((active0 & 0x800037f9c00L) != 0L || (active1 & 0x82a000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 1;
            }
            return 8;
         }
         if ((active0 & 0x2aaa00000006200L) != 0L)
            return 8;
         return -1;
      case 2:
         if ((active0 & 0x8000000c800L) != 0L || (active1 & 0x82a000L) != 0L)
            return 8;
         if ((active0 & 0x37f1400L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0xe0400L) != 0L)
            return 8;
         if ((active0 & 0x3711000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0x1111000L) != 0L)
            return 8;
         if ((active0 & 0x2600000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x200000L) != 0L)
            return 8;
         if ((active0 & 0x2400000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
            return 8;
         }
         return -1;
      case 6:
         if ((active0 & 0x2400000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
            return 8;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_1(0xc801000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_1(0x4000000L, 0x0L);
      case 37:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10L);
      case 38:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_1(0x40000000000L, 0x20L);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4L);
      case 43:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1L);
      case 44:
         return jjStopAtPos(0, 35);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_1(0x800000L, 0x2L);
      case 46:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_1(0x4000000000L, 0x400000L);
      case 47:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8L);
      case 58:
         return jjStopAtPos(0, 34);
      case 59:
         return jjStopAtPos(0, 33);
      case 60:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_1(0x100000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_1(0x3400400000000000L, 0x0L);
      case 62:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_1(0x10000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_1(0x32000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800000L);
      case 91:
         return jjStopAtPos(0, 31);
      case 93:
         return jjStopAtPos(0, 32);
      case 94:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x1000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x2000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x2000L, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x800000010400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x500800L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x28000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x200L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x280000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x2000000044000L, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x200000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x200000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x20000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x80000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x8000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 29);
      case 124:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_1(0x100000000000L, 0x40L);
      case 125:
         return jjStopAtPos(0, 30);
      case 126:
         return jjStartNfaWithStates_1(0, 85, 25);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 46:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 63:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 94:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x108000L, active1, 0x800000L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 53, 8);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 57, 8);
         return jjMoveStringLiteralDfa2_1(active0, 0x204000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(1, 9, 8);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(1, 13, 8);
         return jjMoveStringLiteralDfa2_1(active0, 0x2000800L, active1, 0x28000L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L, active1, 0L);
      case 113:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 47, 8);
         break;
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 45, 8);
         return jjMoveStringLiteralDfa2_1(active0, 0x1080000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 51, 8);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 55, 8);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x440000L, active1, 0L);
      case 124:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 126:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         break;
      case 78:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(2, 87, 8);
         break;
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 43, 8);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 79, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x2400000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(2, 11, 8);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 15, 8);
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x400L, active1, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(2, 81, 8);
         return jjMoveStringLiteralDfa3_1(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000L, active1, 0L);
      case 118:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(2, 77, 8);
         break;
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(2, 14, 8);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x5000000L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 8);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 17, 8);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(3, 19, 8);
         break;
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(3, 18, 8);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x2010000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 12, 8);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 8);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(4, 24, 8);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(4, 16, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(5, 21, 8);
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(7, 25, 8);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(7, 22, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 47)
                     jjAddStates(50, 51);
                  else if (curChar == 39)
                     jjCheckNAddStates(52, 54);
                  else if (curChar == 34)
                     jjCheckNAddStates(55, 57);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 30:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(58, 60);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(61, 63);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(61, 63);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(55, 57);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 13:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(52, 54);
                  break;
               case 15:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 18:
                  if (curChar == 39 && kind > 104)
                     kind = 104;
                  break;
               case 20:
                  jjCheckNAddStates(64, 66);
                  break;
               case 22:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 25:
                  if (curChar == 47)
                     jjCheckNAddStates(67, 69);
                  break;
               case 26:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 28:
                  if (curChar == 47 && kind > 106)
                     kind = 106;
                  break;
               case 29:
                  if (curChar == 47)
                     jjAddStates(50, 51);
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 42)
                     jjCheckNAddStates(70, 72);
                  break;
               case 33:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 34:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 35:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 36:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(58, 60);
                  break;
               case 37:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(58, 60);
                  break;
               case 38:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 39:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 40:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(25);
                  else if (curChar == 96)
                     jjCheckNAddStates(64, 66);
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(61, 63);
                  break;
               case 6:
                  if (curChar == 64)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 11:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  jjCheckNAddStates(55, 57);
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  jjCheckNAddStates(52, 54);
                  break;
               case 19:
                  if (curChar == 96)
                     jjCheckNAddStates(64, 66);
                  break;
               case 20:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 21:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  jjCheckNAddStates(64, 66);
                  break;
               case 23:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 24:
                  if (curChar == 126)
                     jjCheckNAdd(25);
                  break;
               case 26:
                  jjAddStates(67, 69);
                  break;
               case 27:
                  if (curChar == 92)
                     jjCheckNAdd(25);
                  break;
               case 31:
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  jjCheckNAddTwoStates(34, 32);
                  break;
               case 37:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(58, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(61, 63);
                  break;
               case 10:
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(55, 57);
                  break;
               case 15:
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(52, 54);
                  break;
               case 20:
               case 22:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(64, 66);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(67, 69);
                  break;
               case 31:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
               case 34:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(34, 32);
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(58, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x5000000000L) != 0L || (active1 & 0x400000L) != 0L)
            return 12;
         if ((active0 & 0x2aaa800037ffe00L) != 0L || (active1 & 0x82a000L) != 0L)
         {
            jjmatchedKind = 90;
            return 74;
         }
         if ((active1 & 0x200000L) != 0L)
            return 33;
         if ((active1 & 0x1008L) != 0L)
            return 63;
         if ((active0 & 0x4000000L) != 0L)
            return 54;
         return -1;
      case 1:
         if ((active0 & 0x800037f9c00L) != 0L || (active1 & 0x82a000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 74;
         }
         if ((active0 & 0x2aaa00000006200L) != 0L)
            return 74;
         return -1;
      case 2:
         if ((active0 & 0x37f1400L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
            return 74;
         }
         if ((active0 & 0x8000000c800L) != 0L || (active1 & 0x82a000L) != 0L)
            return 74;
         return -1;
      case 3:
         if ((active0 & 0x3711000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
            return 74;
         }
         if ((active0 & 0xe0400L) != 0L)
            return 74;
         return -1;
      case 4:
         if ((active0 & 0x2600000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 74;
         }
         if ((active0 & 0x1111000L) != 0L)
            return 74;
         return -1;
      case 5:
         if ((active0 & 0x2400000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 74;
         }
         if ((active0 & 0x200000L) != 0L)
            return 74;
         return -1;
      case 6:
         if ((active0 & 0x2400000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 74;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0xc801000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 37:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 38:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x20L);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 43:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 44:
         return jjStopAtPos(0, 35);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x2L);
      case 46:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x400000L);
      case 47:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 58:
         return jjStopAtPos(0, 34);
      case 59:
         return jjStopAtPos(0, 33);
      case 60:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x3400400000000000L, 0x0L);
      case 62:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x32000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 91:
         return jjStopAtPos(0, 31);
      case 93:
         return jjStopAtPos(0, 32);
      case 94:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000010400L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x500800L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x28000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x280000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000044000L, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 29);
      case 124:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x40L);
      case 125:
         return jjStopAtPos(0, 30);
      case 126:
         return jjStartNfaWithStates_0(0, 85, 33);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 46:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 63:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 94:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000L, active1, 0x800000L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 74);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 74);
         return jjMoveStringLiteralDfa2_0(active0, 0x204000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 74);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 74);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000800L, active1, 0x28000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 113:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 74);
         break;
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 74);
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 74);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 74);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x440000L, active1, 0L);
      case 124:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 126:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         break;
      case 78:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 74);
         break;
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 74);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 74);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 74);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 74);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 74);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 118:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 74);
         break;
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 74);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 74);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 74);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 74);
         break;
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 74);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 74);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 74);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 74);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 74);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 74);
         break;
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 74;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 63:
                  if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(73, 75);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 74:
               case 3:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 81);
                  else if (curChar == 47)
                     jjAddStates(82, 83);
                  else if (curChar == 35)
                     jjAddStates(84, 85);
                  else if (curChar == 39)
                     jjCheckNAddStates(86, 88);
                  else if (curChar == 34)
                     jjCheckNAddStates(89, 91);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 36)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddStates(92, 94);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(7);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(95, 97);
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar != 36)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x8500000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 6:
                  if (curChar == 35)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(98, 100);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(89, 91);
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(89, 91);
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(89, 91);
                  break;
               case 21:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 22:
                  if (curChar == 39)
                     jjCheckNAddStates(86, 88);
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(86, 88);
                  break;
               case 25:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(86, 88);
                  break;
               case 26:
                  if (curChar == 39 && kind > 104)
                     kind = 104;
                  break;
               case 28:
                  jjCheckNAddStates(101, 103);
                  break;
               case 30:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     jjCheckNAddStates(101, 103);
                  break;
               case 33:
                  if (curChar == 47)
                     jjCheckNAddStates(104, 106);
                  break;
               case 34:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(104, 106);
                  break;
               case 36:
                  if (curChar == 47 && kind > 106)
                     kind = 106;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 81);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 46)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(107, 109);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(43, 16);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(110, 113);
                  break;
               case 45:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(46, 16);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(48, 16);
                  break;
               case 49:
                  if (curChar != 48)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(92, 94);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(51, 10);
                  break;
               case 52:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(52, 10);
                  break;
               case 53:
                  if (curChar == 35)
                     jjAddStates(84, 85);
                  break;
               case 55:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(95, 97);
                  break;
               case 56:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 57:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 58:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 62:
                  if (curChar == 47)
                     jjAddStates(82, 83);
                  break;
               case 64:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 42)
                     jjCheckNAddStates(114, 116);
                  break;
               case 66:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 67:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 68:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 69:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(73, 75);
                  break;
               case 70:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(73, 75);
                  break;
               case 71:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 72:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 73:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 74:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(33);
                  else if (curChar == 96)
                     jjCheckNAddStates(101, 103);
                  if (curChar == 64)
                     jjCheckNAdd(1);
                  break;
               case 54:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar != 92)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 10:
                  if ((0x110000001100L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(117, 118);
                  break;
               case 16:
                  if ((0x5400000054L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(89, 91);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  jjCheckNAddStates(89, 91);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(86, 88);
                  break;
               case 24:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  jjCheckNAddStates(86, 88);
                  break;
               case 27:
                  if (curChar == 96)
                     jjCheckNAddStates(101, 103);
                  break;
               case 28:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(101, 103);
                  break;
               case 29:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  jjCheckNAddStates(101, 103);
                  break;
               case 31:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 32:
                  if (curChar == 126)
                     jjCheckNAdd(33);
                  break;
               case 34:
                  jjAddStates(104, 106);
                  break;
               case 35:
                  if (curChar == 92)
                     jjCheckNAdd(33);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(119, 120);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(121, 122);
                  break;
               case 50:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddTwoStates(51, 10);
                  break;
               case 55:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(95, 97);
                  break;
               case 59:
                  if (curChar == 78 && kind > 100)
                     kind = 100;
                  break;
               case 60:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 64:
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
               case 67:
                  jjCheckNAddTwoStates(67, 65);
                  break;
               case 70:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(73, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(89, 91);
                  break;
               case 23:
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(86, 88);
                  break;
               case 28:
               case 30:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(101, 103);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(104, 106);
                  break;
               case 55:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(95, 97);
                  break;
               case 64:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
               case 67:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 70:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(73, 75);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   53, 54, 56, 68, 69, 71, 36, 37, 42, 43, 44, 14, 61, 67, 52, 59, 
   21, 22, 24, 16, 17, 19, 48, 50, 8, 10, 11, 14, 26, 27, 29, 32, 
   33, 34, 38, 39, 14, 42, 43, 44, 14, 63, 64, 66, 12, 13, 40, 41, 
   45, 46, 30, 36, 15, 16, 18, 10, 11, 13, 37, 38, 40, 1, 2, 4, 
   20, 21, 23, 26, 27, 28, 32, 33, 35, 70, 71, 73, 38, 39, 44, 45, 
   46, 16, 63, 69, 54, 61, 23, 24, 26, 18, 19, 21, 50, 52, 10, 55, 
   56, 58, 12, 13, 16, 28, 29, 31, 34, 35, 36, 40, 41, 16, 44, 45, 
   46, 16, 65, 66, 68, 14, 15, 42, 43, 47, 48, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\151\146", 
"\145\154\163\145", "\146\157\162", "\167\150\151\154\145", "\144\157", "\156\145\167", 
"\166\141\162", "\145\155\160\164\171", "\163\151\172\145", "\156\165\154\154", 
"\164\162\165\145", "\146\141\154\163\145", "\162\145\164\165\162\156", 
"\146\165\156\143\164\151\157\156", "\55\76", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\43\160\162\141\147\155\141", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", "\56", 
"\77\56", "\56\56\56", "\77", "\77\72", "\77\77", "\46\46", "\141\156\144", "\174\174", 
"\157\162", "\75\75", "\145\161", "\41\75", "\156\145", "\76", "\147\164", "\76\75", 
"\147\145", "\74", "\154\164", "\74\75", "\154\145", "\75\176", "\41\176", "\75\136", 
"\75\44", "\41\136", "\41\44", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", 
"\46\75", "\174\75", "\136\75", "\75", "\53", "\55", "\52", "\57", "\144\151\166", 
"\45", "\155\157\144", "\41", "\156\157\164", "\46", "\174", "\136", "\176", 
"\56\56", "\116\141\116", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "REGISTERS",
   "DOT_ID",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x710c7ffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[74];
private final int[] jjstateSet = new int[148];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 74; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 2;
int defaultLexState = 2;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                      popDot();
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                          popDot();
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                        popDot();
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                            popDot();
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                      popDot();
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                         popDot();
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                         popDot();
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                            popDot();
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                          popDot();
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                           popDot();
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                          popDot();
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                             popDot();
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                              popDot();
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                                   popDot();
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                            popDot();
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                                  popDot();
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                               popDot();
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                      pushDot();
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                        pushDot();
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                           popDot();
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                      popDot();
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                      popDot();
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                      popDot();
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                      popDot();
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                      popDot();
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                      popDot();
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                       popDot();
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                        popDot();
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                        popDot();
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                        popDot();
         break;
      case 89 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         popDot();
         break;
      case 90 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          matchedToken.image = StringParser.unescapeIdentifier(matchedToken.image);
         break;
      case 104 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      case 105 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      case 106 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      popDot();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
