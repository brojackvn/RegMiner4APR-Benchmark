/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package org.apache.commons.jexl3.parser;

import java.util.Collections;
import java.util.LinkedList;

import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlException;
import org.apache.commons.jexl3.internal.Scope;

public final class Parser extends JexlParser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();public ASTJexlScript parse(JexlInfo jexlInfo, JexlFeatures jexlFeatures, String jexlSrc, Scope scope) {
        JexlFeatures previous = getFeatures();
        try {
            setFeatures(jexlFeatures);
            // If registers are allowed, the default parser state has to be REGISTERS.
            if (jexlFeatures.supportsRegister()) {
                token_source.defaultLexState = REGISTERS;
            }
            // lets do the 'Unique Init' in here to be safe - it's a pain to remember
            info = jexlInfo != null? jexlInfo : new JexlInfo();
            source = jexlSrc;
            pragmas = null;
            frame = scope;
            ReInit(new java.io.StringReader(jexlSrc));
            ASTJexlScript script = jexlFeatures.supportsScript()? JexlScript(scope) : JexlExpression(scope);
            script.jjtSetValue(info);
            script.setPragmas(pragmas != null
                             ? Collections.<String,Object>unmodifiableMap(pragmas)
                             : Collections.<String,Object>emptyMap());
            return script;
        } catch (TokenMgrError xtme) {
            throw new JexlException.Tokenization(info, xtme).clean();
        } catch (ParseException xparse) {
            throw new JexlException.Parsing(info, xparse).clean();
        } finally {
            token_source.defaultLexState = DEFAULT;
            cleanup(previous);
        }
    }

/***************************************
 *      Statements
 ***************************************/
  final public ASTJexlScript JexlScript(Scope frame) throws ParseException {
                                         /*@bgen(jjtree) JexlScript */
    ASTJexlScript jjtn000 = new ASTJexlScript(JJTJEXLSCRIPT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setScope(frame);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case DO:
        case NEW:
        case VAR:
        case EMPTY:
        case SIZE:
        case NULL:
        case TRUE:
        case FALSE:
        case RETURN:
        case FUNCTION:
        case BREAK:
        case CONTINUE:
        case PRAGMA:
        case LPAREN:
        case LCURLY:
        case LBRACKET:
        case SEMICOL:
        case plus:
        case minus:
        case not:
        case NOT:
        case tilda:
        case NAN_LITERAL:
        case ANNOTATION:
        case IDENTIFIER:
        case REGISTER:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case JXLT_LITERAL:
        case REGEX_LITERAL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Statement();
      }
      jj_consume_token(0);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return jjtn000.script();}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTJexlScript JexlExpression(Scope frame) throws ParseException {
                                                         /*@bgen(jjtree) JexlScript */
    ASTJexlScript jjtn000 = new ASTJexlScript(JJTJEXLSCRIPT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setScope(frame);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case LPAREN:
      case LCURLY:
      case LBRACKET:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Expression();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(0);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return jjtn000.script();}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Annotation() throws ParseException {
 /*@bgen(jjtree) Annotation */
    ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(ANNOTATION);
      if (jj_2_1(2147483647)) {
        Arguments();
      } else {
        ;
      }
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                         jjtreeCloseNodeScope(jjtn000);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                         jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void AnnotatedStatement() throws ParseException {
                                                   /*@bgen(jjtree) #AnnotatedStatement(true) */
  ASTAnnotatedStatement jjtn000 = new ASTAnnotatedStatement(JJTANNOTATEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_2:
      while (true) {
        Annotation();
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        Block();
        break;
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case RETURN:
      case FUNCTION:
      case BREAK:
      case CONTINUE:
      case PRAGMA:
      case LPAREN:
      case LBRACKET:
      case SEMICOL:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case ANNOTATION:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Statement();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOL:
      jj_consume_token(SEMICOL);
      break;
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_3(2147483647)) {
        AnnotatedStatement();
      } else if (jj_2_4(2147483647)) {
        ExpressionStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          Block();
          break;
        case IF:
          IfStatement();
          break;
        case FOR:
          ForeachStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case DO:
          DoWhileStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case CONTINUE:
          Continue();
          break;
        case BREAK:
          Break();
          break;
        case VAR:
          Var();
          break;
        case PRAGMA:
          Pragma();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Block() throws ParseException {
                       /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LCURLY);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case DO:
        case NEW:
        case VAR:
        case EMPTY:
        case SIZE:
        case NULL:
        case TRUE:
        case FALSE:
        case RETURN:
        case FUNCTION:
        case BREAK:
        case CONTINUE:
        case PRAGMA:
        case LPAREN:
        case LCURLY:
        case LBRACKET:
        case SEMICOL:
        case plus:
        case minus:
        case not:
        case NOT:
        case tilda:
        case NAN_LITERAL:
        case ANNOTATION:
        case IDENTIFIER:
        case REGISTER:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case JXLT_LITERAL:
        case REGEX_LITERAL:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        Statement();
      }
      jj_consume_token(RCURLY);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ExpressionStatement() throws ParseException {
    Expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case LPAREN:
      case LCURLY:
      case LBRACKET:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
                                 ASTAmbiguous jjtn001 = new ASTAmbiguous(JJTAMBIGUOUS);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  1);
                                   jjtreeCloseNodeScope(jjtn001);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOL:
      jj_consume_token(SEMICOL);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void IfStatement() throws ParseException {
                      /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        Block();
        break;
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case RETURN:
      case FUNCTION:
      case BREAK:
      case CONTINUE:
      case PRAGMA:
      case LPAREN:
      case LBRACKET:
      case SEMICOL:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case ANNOTATION:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Statement();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(ELSE);
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          Block();
          break;
        case IF:
        case FOR:
        case WHILE:
        case DO:
        case NEW:
        case VAR:
        case EMPTY:
        case SIZE:
        case NULL:
        case TRUE:
        case FALSE:
        case RETURN:
        case FUNCTION:
        case BREAK:
        case CONTINUE:
        case PRAGMA:
        case LPAREN:
        case LBRACKET:
        case SEMICOL:
        case plus:
        case minus:
        case not:
        case NOT:
        case tilda:
        case NAN_LITERAL:
        case ANNOTATION:
        case IDENTIFIER:
        case REGISTER:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case JXLT_LITERAL:
        case REGEX_LITERAL:
          Statement();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
          Block();
          break;
        case IF:
        case FOR:
        case WHILE:
        case DO:
        case NEW:
        case VAR:
        case EMPTY:
        case SIZE:
        case NULL:
        case TRUE:
        case FALSE:
        case RETURN:
        case FUNCTION:
        case BREAK:
        case CONTINUE:
        case PRAGMA:
        case LPAREN:
        case LBRACKET:
        case SEMICOL:
        case plus:
        case minus:
        case not:
        case NOT:
        case tilda:
        case NAN_LITERAL:
        case ANNOTATION:
        case IDENTIFIER:
        case REGISTER:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case JXLT_LITERAL:
        case REGEX_LITERAL:
          Statement();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void WhileStatement() throws ParseException {
                         /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
                                              loopCount += 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        Block();
        break;
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case RETURN:
      case FUNCTION:
      case BREAK:
      case CONTINUE:
      case PRAGMA:
      case LPAREN:
      case LBRACKET:
      case SEMICOL:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case ANNOTATION:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Statement();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                        jjtc000 = false;
                                                                                                        jjtreeCloseNodeScope(jjtn000);
                                                                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                                                                        loopCount -= 1;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void DoWhileStatement() throws ParseException {
                           /*@bgen(jjtree) DoWhileStatement */
  ASTDoWhileStatement jjtn000 = new ASTDoWhileStatement(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DO);
           loopCount += 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        Block();
        break;
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case RETURN:
      case FUNCTION:
      case BREAK:
      case CONTINUE:
      case PRAGMA:
      case LPAREN:
      case LBRACKET:
      case SEMICOL:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case ANNOTATION:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Statement();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                           jjtreeCloseNodeScope(jjtn000);
                                                                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                                                                           loopCount -= 1;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ReturnStatement() throws ParseException {
                          /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      ExpressionStatement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Continue() throws ParseException {
                             /*@bgen(jjtree) Continue */
    ASTContinue jjtn000 = new ASTContinue(JJTCONTINUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(CONTINUE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtreeCloseNodeScope(jjtn000);
                   jjtn000.jjtSetLastToken(getToken(0));
                   if (loopCount == 0) { throwParsingException(null, t); }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Break() throws ParseException {
                       /*@bgen(jjtree) Break */
    ASTBreak jjtn000 = new ASTBreak(JJTBREAK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(BREAK);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtreeCloseNodeScope(jjtn000);
                jjtn000.jjtSetLastToken(getToken(0));
                if (loopCount == 0) { throwParsingException(null, t); }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ForeachStatement() throws ParseException {
                           /*@bgen(jjtree) ForeachStatement */
  ASTForeachStatement jjtn000 = new ASTForeachStatement(JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      ForEachVar();
      jj_consume_token(COLON);
      Expression();
      jj_consume_token(RPAREN);
                                                                 loopCount += 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        Block();
        break;
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case RETURN:
      case FUNCTION:
      case BREAK:
      case CONTINUE:
      case PRAGMA:
      case LPAREN:
      case LBRACKET:
      case SEMICOL:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case ANNOTATION:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Statement();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                                          jjtc000 = false;
                                                                                                                          jjtreeCloseNodeScope(jjtn000);
                                                                                                                          jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                          loopCount -= 1;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ForEachVar() throws ParseException {
                                /*@bgen(jjtree) Reference */
  ASTReference jjtn000 = new ASTReference(JJTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        DeclareVar();
        break;
      case IDENTIFIER:
      case REGISTER:
        Identifier(true);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Var() throws ParseException {
    jj_consume_token(VAR);
    DeclareVar();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case assign:
      jj_consume_token(assign);
                                                ASTAssignment jjtn001 = new ASTAssignment(JJTASSIGNMENT);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                                jjtreeOpenNodeScope(jjtn001);
                                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte001;}
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte001;}
                                                }
                                                {if (true) throw (Error)jjte001;}
      } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtreeCloseNodeScope(jjtn001);
                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void DeclareVar() throws ParseException {
 /*@bgen(jjtree) Var */
    ASTVar jjtn000 = new ASTVar(JJTVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtreeCloseNodeScope(jjtn000);
                     jjtn000.jjtSetLastToken(getToken(0));
                     declareVariable(jjtn000, t);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Pragma() throws ParseException {
    LinkedList<String> lstr = new LinkedList<String>();
    Object value;
    jj_consume_token(PRAGMA);
    pragmaKey(lstr);
    value = pragmaValue();
                                                declarePragma(stringify(lstr), value);
  }

  final public void pragmaKey(LinkedList<String> lstr) throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                      lstr.add(t.image);
      label_6:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_6;
        }
        pragmaKey(lstr);
      }
      break;
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(DOT_IDENTIFIER);
                               lstr.add(t.image);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Object pragmaValue() throws ParseException {
Token v;
LinkedList<String> lstr = new LinkedList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      v = jj_consume_token(INTEGER_LITERAL);
                                         {if (true) return NumberParser.parseInteger(v.image);}
      break;
    case FLOAT_LITERAL:
      v = jj_consume_token(FLOAT_LITERAL);
                                       {if (true) return NumberParser.parseDouble(v.image);}
      break;
    case STRING_LITERAL:
      v = jj_consume_token(STRING_LITERAL);
                                        {if (true) return Parser.buildString(v.image, true);}
      break;
    case DOT:
    case IDENTIFIER:
      pragmaKey(lstr);
                                      {if (true) return stringify(lstr);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                            {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                             {if (true) return false;}
      break;
    case NULL:
      jj_consume_token(NULL);
                            {if (true) return null;}
      break;
    case NAN_LITERAL:
      jj_consume_token(NAN_LITERAL);
                                   {if (true) return Double.NaN;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/***************************************
 *      Expression syntax
 ***************************************/
  final public void Expression() throws ParseException {
    AssignmentExpression();
  }

  final public void AssignmentExpression() throws ParseException {
    ConditionalExpression();
    label_7:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus_assign:
        jj_consume_token(plus_assign);
                     ASTSetAddNode jjtn001 = new ASTSetAddNode(JJTSETADDNODE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtreeCloseNodeScope(jjtn001);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
        }
        break;
      case mult_assign:
        jj_consume_token(mult_assign);
                     ASTSetMultNode jjtn002 = new ASTSetMultNode(JJTSETMULTNODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtreeOpenNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
        } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtreeCloseNodeScope(jjtn002);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
        }
        break;
      case div_assign:
        jj_consume_token(div_assign);
                    ASTSetDivNode jjtn003 = new ASTSetDivNode(JJTSETDIVNODE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte003;}
                    }
                    if (jjte003 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte003;}
                    }
                    {if (true) throw (Error)jjte003;}
        } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003,  2);
                      jjtreeCloseNodeScope(jjtn003);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case mod_assign:
        jj_consume_token(mod_assign);
                    ASTSetModNode jjtn004 = new ASTSetModNode(JJTSETMODNODE);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                    jjtreeOpenNodeScope(jjtn004);
                    jjtn004.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte004) {
                    if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte004;}
                    }
                    if (jjte004 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte004;}
                    }
                    {if (true) throw (Error)jjte004;}
        } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004,  2);
                      jjtreeCloseNodeScope(jjtn004);
                      jjtn004.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case and_assign:
        jj_consume_token(and_assign);
                    ASTSetAndNode jjtn005 = new ASTSetAndNode(JJTSETANDNODE);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
                    jjtreeOpenNodeScope(jjtn005);
                    jjtn005.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte005) {
                    if (jjtc005) {
                      jjtree.clearNodeScope(jjtn005);
                      jjtc005 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte005 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte005;}
                    }
                    if (jjte005 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte005;}
                    }
                    {if (true) throw (Error)jjte005;}
        } finally {
                    if (jjtc005) {
                      jjtree.closeNodeScope(jjtn005,  2);
                      jjtreeCloseNodeScope(jjtn005);
                      jjtn005.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case or_assign:
        jj_consume_token(or_assign);
                   ASTSetOrNode jjtn006 = new ASTSetOrNode(JJTSETORNODE);
                   boolean jjtc006 = true;
                   jjtree.openNodeScope(jjtn006);
                   jjtreeOpenNodeScope(jjtn006);
                   jjtn006.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte006) {
                   if (jjtc006) {
                     jjtree.clearNodeScope(jjtn006);
                     jjtc006 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte006 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte006;}
                   }
                   if (jjte006 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte006;}
                   }
                   {if (true) throw (Error)jjte006;}
        } finally {
                   if (jjtc006) {
                     jjtree.closeNodeScope(jjtn006,  2);
                     jjtreeCloseNodeScope(jjtn006);
                     jjtn006.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      case xor_assign:
        jj_consume_token(xor_assign);
                   ASTSetXorNode jjtn007 = new ASTSetXorNode(JJTSETXORNODE);
                   boolean jjtc007 = true;
                   jjtree.openNodeScope(jjtn007);
                   jjtreeOpenNodeScope(jjtn007);
                   jjtn007.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte007) {
                   if (jjtc007) {
                     jjtree.clearNodeScope(jjtn007);
                     jjtc007 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte007 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte007;}
                   }
                   if (jjte007 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte007;}
                   }
                   {if (true) throw (Error)jjte007;}
        } finally {
                   if (jjtc007) {
                     jjtree.closeNodeScope(jjtn007,  2);
                     jjtreeCloseNodeScope(jjtn007);
                     jjtn007.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      case minus_assign:
        jj_consume_token(minus_assign);
                      ASTSetSubNode jjtn008 = new ASTSetSubNode(JJTSETSUBNODE);
                      boolean jjtc008 = true;
                      jjtree.openNodeScope(jjtn008);
                      jjtreeOpenNodeScope(jjtn008);
                      jjtn008.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte008) {
                      if (jjtc008) {
                        jjtree.clearNodeScope(jjtn008);
                        jjtc008 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte008 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte008;}
                      }
                      if (jjte008 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte008;}
                      }
                      {if (true) throw (Error)jjte008;}
        } finally {
                      if (jjtc008) {
                        jjtree.closeNodeScope(jjtn008,  2);
                        jjtreeCloseNodeScope(jjtn008);
                        jjtn008.jjtSetLastToken(getToken(0));
                      }
        }
        break;
      case assign:
        jj_consume_token(assign);
               ASTAssignment jjtn009 = new ASTAssignment(JJTASSIGNMENT);
               boolean jjtc009 = true;
               jjtree.openNodeScope(jjtn009);
               jjtreeOpenNodeScope(jjtn009);
               jjtn009.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte009) {
               if (jjtc009) {
                 jjtree.clearNodeScope(jjtn009);
                 jjtc009 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte009 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte009;}
               }
               if (jjte009 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte009;}
               }
               {if (true) throw (Error)jjte009;}
        } finally {
               if (jjtc009) {
                 jjtree.closeNodeScope(jjtn009,  2);
                 jjtreeCloseNodeScope(jjtn009);
                 jjtn009.jjtSetLastToken(getToken(0));
               }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************
 *      Conditional & relational
 ***************************************/
  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
    case ELVIS:
    case NULLP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QMARK:
        jj_consume_token(QMARK);
        Expression();
        jj_consume_token(COLON);
                                   ASTTernaryNode jjtn001 = new ASTTernaryNode(JJTTERNARYNODE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtreeOpenNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte001;}
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte001;}
                                   }
                                   {if (true) throw (Error)jjte001;}
        } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  3);
                                     jjtreeCloseNodeScope(jjtn001);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
        }
        break;
      case ELVIS:
        jj_consume_token(ELVIS);
              ASTTernaryNode jjtn002 = new ASTTernaryNode(JJTTERNARYNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtreeCloseNodeScope(jjtn002);
                jjtn002.jjtSetLastToken(getToken(0));
              }
        }
        break;
      case NULLP:
        jj_consume_token(NULLP);
              ASTNullpNode jjtn003 = new ASTNullpNode(JJTNULLPNODE);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
              jjtreeOpenNodeScope(jjtn003);
              jjtn003.jjtSetFirstToken(getToken(1));
        try {
          Expression();
        } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte003;}
              }
              if (jjte003 instanceof ParseException) {
                {if (true) throw (ParseException)jjte003;}
              }
              {if (true) throw (Error)jjte003;}
        } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
                jjtreeCloseNodeScope(jjtn003);
                jjtn003.jjtSetLastToken(getToken(0));
              }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case _OR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        break;
      case _OR:
        jj_consume_token(_OR);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                   ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtreeCloseNodeScope(jjtn001);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case _AND:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case _AND:
        jj_consume_token(_AND);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                     ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
      try {
        InclusiveOrExpression();
      } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtreeCloseNodeScope(jjtn001);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
      }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case or:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      jj_consume_token(or);
           ASTBitwiseOrNode jjtn001 = new ASTBitwiseOrNode(JJTBITWISEORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ExclusiveOrExpression();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtreeCloseNodeScope(jjtn001);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case xor:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      jj_consume_token(xor);
            ASTBitwiseXorNode jjtn001 = new ASTBitwiseXorNode(JJTBITWISEXORNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        AndExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
      jj_consume_token(and);
            ASTBitwiseAndNode jjtn001 = new ASTBitwiseAndNode(JJTBITWISEANDNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case eq:
    case EQ:
    case ne:
    case NE:
    case range:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case eq:
      case EQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case eq:
          jj_consume_token(eq);
          break;
        case EQ:
          jj_consume_token(EQ);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                     ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtreeCloseNodeScope(jjtn001);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
        }
        break;
      case ne:
      case NE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ne:
          jj_consume_token(ne);
          break;
        case NE:
          jj_consume_token(NE);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                     ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtreeOpenNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
        } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtreeCloseNodeScope(jjtn002);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
        }
        break;
      case range:
        jj_consume_token(range);
               ASTRangeNode jjtn003 = new ASTRangeNode(JJTRANGENODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
               jjtn003.jjtSetFirstToken(getToken(1));
        try {
          RelationalExpression();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
                 jjtreeCloseNodeScope(jjtn003);
                 jjtn003.jjtSetLastToken(getToken(0));
               }
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case gt:
    case GT:
    case ge:
    case GE:
    case lt:
    case LT:
    case le:
    case LE:
    case req:
    case rne:
    case seq:
    case eeq:
    case sne:
    case ene:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lt:
      case LT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case lt:
          jj_consume_token(lt);
          break;
        case LT:
          jj_consume_token(LT);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtreeCloseNodeScope(jjtn001);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case gt:
      case GT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case gt:
          jj_consume_token(gt);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                      jjtreeCloseNodeScope(jjtn002);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case le:
      case LE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case le:
          jj_consume_token(le);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte003;}
                    }
                    if (jjte003 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte003;}
                    }
                    {if (true) throw (Error)jjte003;}
        } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003,  2);
                      jjtreeCloseNodeScope(jjtn003);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case ge:
      case GE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ge:
          jj_consume_token(ge);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                    jjtreeOpenNodeScope(jjtn004);
                    jjtn004.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
                    if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte004;}
                    }
                    if (jjte004 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte004;}
                    }
                    {if (true) throw (Error)jjte004;}
        } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004,  2);
                      jjtreeCloseNodeScope(jjtn004);
                      jjtn004.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case req:
        jj_consume_token(req);
            ASTERNode jjtn005 = new ASTERNode(JJTERNODE);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtreeOpenNodeScope(jjtn005);
            jjtn005.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte005) {
            if (jjtc005) {
              jjtree.clearNodeScope(jjtn005);
              jjtc005 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte005 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte005;}
            }
            if (jjte005 instanceof ParseException) {
              {if (true) throw (ParseException)jjte005;}
            }
            {if (true) throw (Error)jjte005;}
        } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005,  2);
              jjtreeCloseNodeScope(jjtn005);
              jjtn005.jjtSetLastToken(getToken(0));
            }
        }
        break;
      case rne:
        jj_consume_token(rne);
            ASTNRNode jjtn006 = new ASTNRNode(JJTNRNODE);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
            jjtreeOpenNodeScope(jjtn006);
            jjtn006.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte006) {
            if (jjtc006) {
              jjtree.clearNodeScope(jjtn006);
              jjtc006 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte006 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte006;}
            }
            if (jjte006 instanceof ParseException) {
              {if (true) throw (ParseException)jjte006;}
            }
            {if (true) throw (Error)jjte006;}
        } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006,  2);
              jjtreeCloseNodeScope(jjtn006);
              jjtn006.jjtSetLastToken(getToken(0));
            }
        }
        break;
      case seq:
        jj_consume_token(seq);
            ASTSWNode jjtn007 = new ASTSWNode(JJTSWNODE);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
            jjtreeOpenNodeScope(jjtn007);
            jjtn007.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte007) {
            if (jjtc007) {
              jjtree.clearNodeScope(jjtn007);
              jjtc007 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte007 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte007;}
            }
            if (jjte007 instanceof ParseException) {
              {if (true) throw (ParseException)jjte007;}
            }
            {if (true) throw (Error)jjte007;}
        } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  2);
              jjtreeCloseNodeScope(jjtn007);
              jjtn007.jjtSetLastToken(getToken(0));
            }
        }
        break;
      case sne:
        jj_consume_token(sne);
            ASTNSWNode jjtn008 = new ASTNSWNode(JJTNSWNODE);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
            jjtreeOpenNodeScope(jjtn008);
            jjtn008.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte008) {
            if (jjtc008) {
              jjtree.clearNodeScope(jjtn008);
              jjtc008 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte008 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte008;}
            }
            if (jjte008 instanceof ParseException) {
              {if (true) throw (ParseException)jjte008;}
            }
            {if (true) throw (Error)jjte008;}
        } finally {
            if (jjtc008) {
              jjtree.closeNodeScope(jjtn008,  2);
              jjtreeCloseNodeScope(jjtn008);
              jjtn008.jjtSetLastToken(getToken(0));
            }
        }
        break;
      case eeq:
        jj_consume_token(eeq);
            ASTEWNode jjtn009 = new ASTEWNode(JJTEWNODE);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
            jjtreeOpenNodeScope(jjtn009);
            jjtn009.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte009) {
            if (jjtc009) {
              jjtree.clearNodeScope(jjtn009);
              jjtc009 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte009 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte009;}
            }
            if (jjte009 instanceof ParseException) {
              {if (true) throw (ParseException)jjte009;}
            }
            {if (true) throw (Error)jjte009;}
        } finally {
            if (jjtc009) {
              jjtree.closeNodeScope(jjtn009,  2);
              jjtreeCloseNodeScope(jjtn009);
              jjtn009.jjtSetLastToken(getToken(0));
            }
        }
        break;
      case ene:
        jj_consume_token(ene);
            ASTNEWNode jjtn010 = new ASTNEWNode(JJTNEWNODE);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
            jjtreeOpenNodeScope(jjtn010);
            jjtn010.jjtSetFirstToken(getToken(1));
        try {
          AdditiveExpression();
        } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte010;}
            }
            if (jjte010 instanceof ParseException) {
              {if (true) throw (ParseException)jjte010;}
            }
            {if (true) throw (Error)jjte010;}
        } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010,  2);
              jjtreeCloseNodeScope(jjtn010);
              jjtn010.jjtSetLastToken(getToken(0));
            }
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
  }

/***************************************
 *      Arithmetic
 ***************************************/
  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_13:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
        jj_consume_token(plus);
             ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
               jjtn001.jjtSetLastToken(getToken(0));
             }
        }
        break;
      case minus:
        jj_consume_token(minus);
              ASTSubNode jjtn002 = new ASTSubNode(JJTSUBNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtreeCloseNodeScope(jjtn002);
                jjtn002.jjtSetLastToken(getToken(0));
              }
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mult:
      case div:
      case DIV:
      case mod:
      case MOD:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mult:
        jj_consume_token(mult);
             ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
               jjtn001.jjtSetLastToken(getToken(0));
             }
        }
        break;
      case div:
      case DIV:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case div:
          jj_consume_token(div);
          break;
        case DIV:
          jj_consume_token(DIV);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                      jjtreeCloseNodeScope(jjtn002);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      case mod:
      case MOD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case mod:
          jj_consume_token(mod);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                    ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte003;}
                    }
                    if (jjte003 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte003;}
                    }
                    {if (true) throw (Error)jjte003;}
        } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003,  2);
                      jjtreeCloseNodeScope(jjtn003);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case minus:
      jj_consume_token(minus);
              ASTUnaryMinusNode jjtn001 = new ASTUnaryMinusNode(JJTUNARYMINUSNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
                jjtreeCloseNodeScope(jjtn001);
                jjtn001.jjtSetLastToken(getToken(0));
              }
      }
      break;
    case plus:
      jj_consume_token(plus);
             ASTUnaryPlusNode jjtn002 = new ASTUnaryPlusNode(JJTUNARYPLUSNODE);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtreeOpenNodeScope(jjtn002);
             jjtn002.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
      } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  1);
               jjtreeCloseNodeScope(jjtn002);
               jjtn002.jjtSetLastToken(getToken(0));
             }
      }
      break;
    case tilda:
      jj_consume_token(tilda);
              ASTBitwiseComplNode jjtn003 = new ASTBitwiseComplNode(JJTBITWISECOMPLNODE);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
              jjtreeOpenNodeScope(jjtn003);
              jjtn003.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte003;}
              }
              if (jjte003 instanceof ParseException) {
                {if (true) throw (ParseException)jjte003;}
              }
              {if (true) throw (Error)jjte003;}
      } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  1);
                jjtreeCloseNodeScope(jjtn003);
                jjtn003.jjtSetLastToken(getToken(0));
              }
      }
      break;
    case not:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
        jj_consume_token(not);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                    ASTNotNode jjtn004 = new ASTNotNode(JJTNOTNODE);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                    jjtreeOpenNodeScope(jjtn004);
                    jjtn004.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte004) {
                    if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte004;}
                    }
                    if (jjte004 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte004;}
                    }
                    {if (true) throw (Error)jjte004;}
      } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004,  1);
                      jjtreeCloseNodeScope(jjtn004);
                      jjtn004.jjtSetLastToken(getToken(0));
                    }
      }
      break;
    case EMPTY:
      jj_consume_token(EMPTY);
              ASTEmptyFunction jjtn005 = new ASTEmptyFunction(JJTEMPTYFUNCTION);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
              jjtreeOpenNodeScope(jjtn005);
              jjtn005.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte005) {
              if (jjtc005) {
                jjtree.clearNodeScope(jjtn005);
                jjtc005 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte005 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte005;}
              }
              if (jjte005 instanceof ParseException) {
                {if (true) throw (ParseException)jjte005;}
              }
              {if (true) throw (Error)jjte005;}
      } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005,  1);
                jjtreeCloseNodeScope(jjtn005);
                jjtn005.jjtSetLastToken(getToken(0));
              }
      }
      break;
    case SIZE:
      jj_consume_token(SIZE);
             ASTSizeFunction jjtn006 = new ASTSizeFunction(JJTSIZEFUNCTION);
             boolean jjtc006 = true;
             jjtree.openNodeScope(jjtn006);
             jjtreeOpenNodeScope(jjtn006);
             jjtn006.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte006) {
             if (jjtc006) {
               jjtree.clearNodeScope(jjtn006);
               jjtc006 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte006 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte006;}
             }
             if (jjte006 instanceof ParseException) {
               {if (true) throw (ParseException)jjte006;}
             }
             {if (true) throw (Error)jjte006;}
      } finally {
             if (jjtc006) {
               jjtree.closeNodeScope(jjtn006,  1);
               jjtreeCloseNodeScope(jjtn006);
               jjtn006.jjtSetLastToken(getToken(0));
             }
      }
      break;
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case FUNCTION:
    case LPAREN:
    case LCURLY:
    case LBRACKET:
    case NAN_LITERAL:
    case IDENTIFIER:
    case REGISTER:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case JXLT_LITERAL:
    case REGEX_LITERAL:
      ValueExpression();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/***************************************
 *      Identifier & Literals
 ***************************************/
  final public void Identifier(boolean top) throws ParseException {
 /*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtreeCloseNodeScope(jjtn000);
                     jjtn000.jjtSetLastToken(getToken(0));
                     jjtn000.setSymbol(top? checkVariable(jjtn000, t.image) : t.image);
        break;
      case REGISTER:
        t = jj_consume_token(REGISTER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtreeCloseNodeScope(jjtn000);
                   jjtn000.jjtSetLastToken(getToken(0));
                   jjtn000.setSymbol(t.image);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void NamespaceIdentifier() throws ParseException {
 /*@bgen(jjtree) NamespaceIdentifier */
    ASTNamespaceIdentifier jjtn000 = new ASTNamespaceIdentifier(JJTNAMESPACEIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token ns;
    Token id;
    try {
      ns = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      id = jj_consume_token(IDENTIFIER);
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                              jjtreeCloseNodeScope(jjtn000);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                              jjtn000.setNamespace(ns.image, id.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void StringIdentifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtreeCloseNodeScope(jjtn000);
                          jjtn000.jjtSetLastToken(getToken(0));
                          jjtn000.setSymbol(Parser.buildString(t.image, true));
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Literal() throws ParseException {
   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FLOAT_LITERAL:
      FloatLiteral();
      break;
    case TRUE:
    case FALSE:
      BooleanLiteral();
      break;
    case JXLT_LITERAL:
      JxltLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    case REGEX_LITERAL:
      RegexLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    case NAN_LITERAL:
      NaNLiteral();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NaNLiteral() throws ParseException {
 /*@bgen(jjtree) NumberLiteral */
  ASTNumberLiteral jjtn000 = new ASTNumberLiteral(JJTNUMBERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NAN_LITERAL);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtreeCloseNodeScope(jjtn000);
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.setReal("NaN");
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void NullLiteral() throws ParseException {
                      /*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = new ASTNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NULL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    ASTTrueNode jjtn001 = new ASTTrueNode(JJTTRUENODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(TRUE);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
      jjtn001.jjtSetLastToken(getToken(0));
    }
      }
      break;
    case FALSE:
    ASTFalseNode jjtn002 = new ASTFalseNode(JJTFALSENODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(FALSE);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
      jjtn002.jjtSetLastToken(getToken(0));
    }
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IntegerLiteral() throws ParseException {
 /*@bgen(jjtree) NumberLiteral */
  ASTNumberLiteral jjtn000 = new ASTNumberLiteral(JJTNUMBERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.setNatural(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FloatLiteral() throws ParseException {
 /*@bgen(jjtree) NumberLiteral */
  ASTNumberLiteral jjtn000 = new ASTNumberLiteral(JJTNUMBERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(FLOAT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.setReal(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void StringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
   ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.setLiteral(Parser.buildString(t.image, true));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void JxltLiteral() throws ParseException {
 /*@bgen(jjtree) JxltLiteral */
   ASTJxltLiteral jjtn000 = new ASTJxltLiteral(JJTJXLTLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(JXLT_LITERAL);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
     jjtn000.setLiteral(Parser.buildString(t.image, true));
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void RegexLiteral() throws ParseException {
 /*@bgen(jjtree) RegexLiteral */
   ASTRegexLiteral jjtn000 = new ASTRegexLiteral(JJTREGEXLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(REGEX_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.setLiteral(Parser.buildRegex(t.image));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ExtendedLiteral() throws ParseException {
                                             /*@bgen(jjtree) #ExtendedLiteral(true) */
  ASTExtendedLiteral jjtn000 = new ASTExtendedLiteral(JJTEXTENDEDLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELIPSIS);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ArrayLiteral() throws ParseException {
                       /*@bgen(jjtree) ArrayLiteral */
  ASTArrayLiteral jjtn000 = new ASTArrayLiteral(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIPSIS:
        ExtendedLiteral();
        break;
      default:
        jj_la1[51] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case EMPTY:
        case SIZE:
        case NULL:
        case TRUE:
        case FALSE:
        case FUNCTION:
        case LPAREN:
        case LCURLY:
        case LBRACKET:
        case plus:
        case minus:
        case not:
        case NOT:
        case tilda:
        case NAN_LITERAL:
        case IDENTIFIER:
        case REGISTER:
        case INTEGER_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case JXLT_LITERAL:
        case REGEX_LITERAL:
          Expression();
          label_15:
          while (true) {
            if (jj_2_9(2)) {
              ;
            } else {
              break label_15;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          ExtendedLiteral();
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void MapLiteral() throws ParseException {
                     /*@bgen(jjtree) MapLiteral */
  ASTMapLiteral jjtn000 = new ASTMapLiteral(JJTMAPLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LCURLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case LPAREN:
      case LCURLY:
      case LBRACKET:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        MapEntry();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          MapEntry();
        }
        break;
      case COLON:
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RCURLY);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void MapEntry() throws ParseException {
                   /*@bgen(jjtree) MapEntry */
  ASTMapEntry jjtn000 = new ASTMapEntry(JJTMAPENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(COLON);
      Expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void SetLiteral() throws ParseException {
                     /*@bgen(jjtree) SetLiteral */
  ASTSetLiteral jjtn000 = new ASTSetLiteral(JJTSETLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LCURLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case LPAREN:
      case LCURLY:
      case LBRACKET:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Expression();
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************
 *      Functions & Methods
 ***************************************/
  final public void Arguments() throws ParseException {
                               /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case LPAREN:
      case LCURLY:
      case LBRACKET:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Expression();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_18;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void FunctionCallLookahead() throws ParseException {
    if (jj_2_10(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
    } else if (jj_2_11(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
    } else if (jj_2_12(2)) {
      jj_consume_token(REGISTER);
      jj_consume_token(LPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionCall() throws ParseException {
    if (jj_2_13(2)) {
      NamespaceIdentifier();
                                           ASTFunctionNode jjtn001 = new ASTFunctionNode(JJTFUNCTIONNODE);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                           jjtreeOpenNodeScope(jjtn001);
                                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Arguments();
      } catch (Throwable jjte001) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte001 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte001;}
                                           }
                                           if (jjte001 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte001;}
                                           }
                                           {if (true) throw (Error)jjte001;}
      } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                             jjtreeCloseNodeScope(jjtn001);
                                             jjtn001.jjtSetLastToken(getToken(0));
                                           }
      }
    } else if (jj_2_14(2)) {
      Identifier(true);
                                      ASTFunctionNode jjtn002 = new ASTFunctionNode(JJTFUNCTIONNODE);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);
                                      jjtn002.jjtSetFirstToken(getToken(1));
      try {
        Arguments();
      } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                        jjtreeCloseNodeScope(jjtn002);
                                        jjtn002.jjtSetLastToken(getToken(0));
                                      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Constructor() throws ParseException {
                                         /*@bgen(jjtree) #ConstructorNode(true) */
  ASTConstructorNode jjtn000 = new ASTConstructorNode(JJTCONSTRUCTORNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NEW);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case LPAREN:
      case LCURLY:
      case LBRACKET:
      case plus:
      case minus:
      case not:
      case NOT:
      case tilda:
      case NAN_LITERAL:
      case IDENTIFIER:
      case REGISTER:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Expression();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[58] = jj_gen;
            break label_19;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Parameter() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                     declareParameter(t);
  }

  final public void Parameters() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Parameter();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        Parameter();
      }
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void LambdaLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      jj_consume_token(FUNCTION);
      Parameters();
      break;
    case LPAREN:
      Parameters();
      jj_consume_token(LAMBDA);
      break;
    case IDENTIFIER:
      Parameter();
      jj_consume_token(LAMBDA);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Lambda() throws ParseException {
 /*@bgen(jjtree) #JexlLambda(true) */
   ASTJexlLambda jjtn000 = new ASTJexlLambda(JJTJEXLLAMBDA);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));pushFrame();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        jj_consume_token(FUNCTION);
        Parameters();
        Block();
        break;
      case LPAREN:
        Parameters();
        jj_consume_token(LAMBDA);
        Block();
        break;
      case IDENTIFIER:
        Parameter();
        jj_consume_token(LAMBDA);
        Block();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/***************************************
 *     References
 ***************************************/
  final public Token dotName() throws ParseException {
    Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT_IDENTIFIER:
      t = jj_consume_token(DOT_IDENTIFIER);
      break;
    case IF:
      t = jj_consume_token(IF);
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
      break;
    case FOR:
      t = jj_consume_token(FOR);
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      break;
    case DO:
      t = jj_consume_token(DO);
      break;
    case NEW:
      t = jj_consume_token(NEW);
      break;
    case EMPTY:
      t = jj_consume_token(EMPTY);
      break;
    case SIZE:
      t = jj_consume_token(SIZE);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    case NULL:
      t = jj_consume_token(NULL);
      break;
    case _OR:
      t = jj_consume_token(_OR);
      break;
    case _AND:
      t = jj_consume_token(_AND);
      break;
    case NOT:
      t = jj_consume_token(NOT);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case VAR:
      t = jj_consume_token(VAR);
      break;
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                {if (true) return t ;}
    throw new Error("Missing return statement in function");
  }

  final public void IdentifierAccess() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case _AND:
      case _OR:
      case EQ:
      case NE:
      case GT:
      case GE:
      case LT:
      case LE:
      case NOT:
      case DOT_IDENTIFIER:
        t = dotName();
                      ASTIdentifierAccess jjtn001 = new ASTIdentifierAccess(JJTIDENTIFIERACCESS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtreeOpenNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
        try {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtreeCloseNodeScope(jjtn001);
                      jjtn001.jjtSetLastToken(getToken(0));
                      jjtn001.setIdentifier(t.image);
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
        }
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                             ASTIdentifierAccess jjtn002 = new ASTIdentifierAccess(JJTIDENTIFIERACCESS);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                             jjtreeOpenNodeScope(jjtn002);
                             jjtn002.jjtSetFirstToken(getToken(1));
        try {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                             jjtreeCloseNodeScope(jjtn002);
                             jjtn002.jjtSetLastToken(getToken(0));
                             jjtn002.setIdentifier(Parser.buildString(t.image, true));
        } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtreeCloseNodeScope(jjtn002);
                               jjtn002.jjtSetLastToken(getToken(0));
                             }
        }
        break;
      case JXLT_LITERAL:
        t = jj_consume_token(JXLT_LITERAL);
                           ASTIdentifierAccessJxlt jjtn003 = new ASTIdentifierAccessJxlt(JJTIDENTIFIERACCESSJXLT);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                           jjtreeOpenNodeScope(jjtn003);
                           jjtn003.jjtSetFirstToken(getToken(1));
        try {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                           jjtreeCloseNodeScope(jjtn003);
                           jjtn003.jjtSetLastToken(getToken(0));
                           jjtn003.setIdentifier(Parser.buildString(t.image, true));
        } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtreeCloseNodeScope(jjtn003);
                             jjtn003.jjtSetLastToken(getToken(0));
                           }
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case QDOT:
      jj_consume_token(QDOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case DO:
      case NEW:
      case VAR:
      case EMPTY:
      case SIZE:
      case NULL:
      case TRUE:
      case FALSE:
      case FUNCTION:
      case _AND:
      case _OR:
      case EQ:
      case NE:
      case GT:
      case GE:
      case LT:
      case LE:
      case NOT:
      case DOT_IDENTIFIER:
        t = dotName();
                      ASTIdentifierAccessSafe jjtn004 = new ASTIdentifierAccessSafe(JJTIDENTIFIERACCESSSAFE);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
                      jjtreeOpenNodeScope(jjtn004);
                      jjtn004.jjtSetFirstToken(getToken(1));
        try {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                      jjtreeCloseNodeScope(jjtn004);
                      jjtn004.jjtSetLastToken(getToken(0));
                      jjtn004.setIdentifier(t.image);
        } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtreeCloseNodeScope(jjtn004);
                        jjtn004.jjtSetLastToken(getToken(0));
                      }
        }
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                             ASTIdentifierAccessSafe jjtn005 = new ASTIdentifierAccessSafe(JJTIDENTIFIERACCESSSAFE);
                             boolean jjtc005 = true;
                             jjtree.openNodeScope(jjtn005);
                             jjtreeOpenNodeScope(jjtn005);
                             jjtn005.jjtSetFirstToken(getToken(1));
        try {
                             jjtree.closeNodeScope(jjtn005, true);
                             jjtc005 = false;
                             jjtreeCloseNodeScope(jjtn005);
                             jjtn005.jjtSetLastToken(getToken(0));
                             jjtn005.setIdentifier(Parser.buildString(t.image, true));
        } finally {
                             if (jjtc005) {
                               jjtree.closeNodeScope(jjtn005, true);
                               jjtreeCloseNodeScope(jjtn005);
                               jjtn005.jjtSetLastToken(getToken(0));
                             }
        }
        break;
      case JXLT_LITERAL:
        t = jj_consume_token(JXLT_LITERAL);
                           ASTIdentifierAccessSafeJxlt jjtn006 = new ASTIdentifierAccessSafeJxlt(JJTIDENTIFIERACCESSSAFEJXLT);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
                           jjtreeOpenNodeScope(jjtn006);
                           jjtn006.jjtSetFirstToken(getToken(1));
        try {
                           jjtree.closeNodeScope(jjtn006, true);
                           jjtc006 = false;
                           jjtreeCloseNodeScope(jjtn006);
                           jjtn006.jjtSetLastToken(getToken(0));
                           jjtn006.setIdentifier(Parser.buildString(t.image, true));
        } finally {
                           if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006, true);
                             jjtreeCloseNodeScope(jjtn006);
                             jjtn006.jjtSetLastToken(getToken(0));
                           }
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayAccess() throws ParseException {
                      /*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_21:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_21;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void MemberAccess() throws ParseException {
    if (jj_2_15(2147483647)) {
      ArrayAccess();
    } else if (jj_2_16(2147483647)) {
      IdentifierAccess();
    } else if (jj_2_17(2147483647)) {
      IdentifierAccess();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ReferenceExpression() throws ParseException {
                                              /*@bgen(jjtree) #MethodNode(> 1) */
  ASTMethodNode jjtn000 = new ASTMethodNode(JJTMETHODNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      Expression();
                              ASTReferenceExpression jjtn001 = new ASTReferenceExpression(JJTREFERENCEEXPRESSION);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
                              jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RPAREN);
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtreeCloseNodeScope(jjtn001);
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
      }
      label_22:
      while (true) {
        if (jj_2_18(2147483647)) {
          ;
        } else {
          break label_22;
        }
        Arguments();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    if (jj_2_19(2147483647)) {
      Lambda();
    } else if (jj_2_20(2147483647)) {
      ReferenceExpression();
    } else if (jj_2_21(2147483647)) {
      MapLiteral();
    } else if (jj_2_22(2147483647)) {
      MapLiteral();
    } else if (jj_2_23(2147483647)) {
      SetLiteral();
    } else if (jj_2_24(2147483647)) {
      SetLiteral();
    } else if (jj_2_25(2147483647)) {
      ArrayLiteral();
    } else if (jj_2_26(2147483647)) {
      Constructor();
    } else if (jj_2_27(2147483647)) {
      FunctionCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case REGISTER:
        Identifier(true);
        break;
      case NULL:
      case TRUE:
      case FALSE:
      case NAN_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case JXLT_LITERAL:
      case REGEX_LITERAL:
        Literal();
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MethodCall() throws ParseException {
      ASTMethodNode jjtn001 = new ASTMethodNode(JJTMETHODNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    try {
      MemberAccess();
      label_23:
      while (true) {
        Arguments();
        if (jj_2_28(2147483647)) {
          ;
        } else {
          break label_23;
        }
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void MemberExpression() throws ParseException {
    if (jj_2_29(2147483647)) {
      MethodCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
      case QDOT:
        MemberAccess();
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ValueExpression() throws ParseException {
      ASTReference jjtn001 = new ASTReference(JJTREFERENCE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    try {
      PrimaryExpression();
      label_24:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_24;
        }
        MemberExpression();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_3R_164() {
    if (jj_3R_170()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(DO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    }
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(ELIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(REGEX_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(ANNOTATION)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(JXLT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ANNOTATION)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    Token xsp;
    if (jj_3R_202()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(ANNOTATION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(NAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(SIZE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(EMPTY)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(tilda)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(plus)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(minus)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(mult)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(minus)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(plus)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(ene)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(eeq)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(sne)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(seq)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(rne)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(req)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_142()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(range)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_52()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(and)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(xor)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(or)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(QDOT)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(NULLP)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(ELVIS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    if (jj_3R_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(JXLT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(JXLT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(QDOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(minus_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(xor_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(or_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(and_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(mod_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(div_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(mult_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(plus_assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(NAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LAMBDA)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(LAMBDA)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DOT_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(assign)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(PRAGMA)) return true;
    if (jj_3R_218()) return true;
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_37()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_216()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(REGISTER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_209()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[71];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xaf7ffa00,0xa85f4000,0xaf7ffa00,0x0,0x2720ba00,0xaf7ffa00,0xa85f4000,0x0,0xaf7ffa00,0xaf7ffa00,0xaf7ffa00,0x400,0xaf7ffa00,0xaf7ffa00,0xaf7ffa00,0x8000,0x0,0x0,0x1c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa85f4000,0x0,0x1c0000,0x180000,0xa85f4000,0x0,0x0,0x0,0xa85f4000,0x0,0xa85f4000,0x0,0xa85f4000,0x0,0xa85f4000,0x0,0x0,0x8400000,0x8400000,0x5ffe00,0x5ffe00,0x5ffe00,0x0,0x80000000,0x1c0000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x0,0x2,0x2,0x0,0x2,0x0,0x2,0x2,0x2,0x2,0x0,0x2,0x2,0x2,0x0,0x0,0x10,0x10,0x0,0x380,0x380,0x3000,0x3000,0xc00,0xc00,0x0,0x0,0x0,0xc000,0x30000,0x3c000,0x3c000,0xc00000,0xc0000,0x3000000,0x300000,0xfffc0000,0xfffc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x40,0x8,0x4,0x8,0x0,0x8,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x2aaa800,0x2aaa800,0x2aaa800,0x30,0x0,0x0,0x30,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xc5a30600,0xc4a30600,0xc5a30600,0x0,0x0,0xc5a30600,0xc4a30600,0x0,0xc5a30600,0xc5a30600,0xc5a30600,0x0,0xc5a30600,0xc5a30600,0xc5a30600,0x44000000,0x100,0x4000000,0x84800000,0x1ff,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x100000,0x40000,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0xf800,0x3000,0xc000,0xf800,0x30000,0xc4a30600,0x44000000,0x80800000,0x0,0xc4a30600,0x0,0x0,0x0,0xc4a30600,0x0,0xc4a30600,0x0,0xc4a30600,0x0,0xc4a30600,0x0,0x4000000,0x4000000,0x4000000,0x2020000,0x2020000,0x2020000,0x0,0x0,0xc4800000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x710,0x710,0x710,0x0,0x0,0x710,0x710,0x0,0x710,0x710,0x710,0x0,0x710,0x710,0x710,0x0,0x0,0x0,0x110,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x710,0x0,0x710,0x0,0x710,0x0,0x0,0x0,0x710,0x0,0x710,0x0,0x710,0x0,0x710,0x0,0x0,0x0,0x0,0x0,0x300,0x300,0x0,0x0,0x710,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 71; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[107];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 71; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 107; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
